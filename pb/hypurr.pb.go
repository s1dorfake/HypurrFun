// User wants to fetch certificates, and credits

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: hypurr.proto

package hypurr_grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HyperliquidLaunchPoolType int32

const (
	HyperliquidLaunchPoolType_Quadratic   HyperliquidLaunchPoolType = 0
	HyperliquidLaunchPoolType_QuadraticV2 HyperliquidLaunchPoolType = 1
	HyperliquidLaunchPoolType_Linear      HyperliquidLaunchPoolType = 2
	HyperliquidLaunchPoolType_Fixed       HyperliquidLaunchPoolType = 3
)

// Enum value maps for HyperliquidLaunchPoolType.
var (
	HyperliquidLaunchPoolType_name = map[int32]string{
		0: "Quadratic",
		1: "QuadraticV2",
		2: "Linear",
		3: "Fixed",
	}
	HyperliquidLaunchPoolType_value = map[string]int32{
		"Quadratic":   0,
		"QuadraticV2": 1,
		"Linear":      2,
		"Fixed":       3,
	}
)

func (x HyperliquidLaunchPoolType) Enum() *HyperliquidLaunchPoolType {
	p := new(HyperliquidLaunchPoolType)
	*p = x
	return p
}

func (x HyperliquidLaunchPoolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HyperliquidLaunchPoolType) Descriptor() protoreflect.EnumDescriptor {
	return file_hypurr_proto_enumTypes[0].Descriptor()
}

func (HyperliquidLaunchPoolType) Type() protoreflect.EnumType {
	return &file_hypurr_proto_enumTypes[0]
}

func (x HyperliquidLaunchPoolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HyperliquidLaunchPoolType.Descriptor instead.
func (HyperliquidLaunchPoolType) EnumDescriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{0}
}

type HyperliquidLaunchTradeDirection int32

const (
	HyperliquidLaunchTradeDirection_BUY  HyperliquidLaunchTradeDirection = 0
	HyperliquidLaunchTradeDirection_SELL HyperliquidLaunchTradeDirection = 1
)

// Enum value maps for HyperliquidLaunchTradeDirection.
var (
	HyperliquidLaunchTradeDirection_name = map[int32]string{
		0: "BUY",
		1: "SELL",
	}
	HyperliquidLaunchTradeDirection_value = map[string]int32{
		"BUY":  0,
		"SELL": 1,
	}
)

func (x HyperliquidLaunchTradeDirection) Enum() *HyperliquidLaunchTradeDirection {
	p := new(HyperliquidLaunchTradeDirection)
	*p = x
	return p
}

func (x HyperliquidLaunchTradeDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HyperliquidLaunchTradeDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_hypurr_proto_enumTypes[1].Descriptor()
}

func (HyperliquidLaunchTradeDirection) Type() protoreflect.EnumType {
	return &file_hypurr_proto_enumTypes[1]
}

func (x HyperliquidLaunchTradeDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HyperliquidLaunchTradeDirection.Descriptor instead.
func (HyperliquidLaunchTradeDirection) EnumDescriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{1}
}

type HyperliquidToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Index             int64                       `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	SzDecimals        int64                       `protobuf:"varint,4,opt,name=sz_decimals,json=szDecimals,proto3" json:"sz_decimals,omitempty"`
	WeiDecimals       int64                       `protobuf:"varint,5,opt,name=wei_decimals,json=weiDecimals,proto3" json:"wei_decimals,omitempty"`
	TokenId           string                      `protobuf:"bytes,6,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	CirculatingSupply float64                     `protobuf:"fixed64,7,opt,name=circulating_supply,json=circulatingSupply,proto3" json:"circulating_supply,omitempty"`
	DeployInfo        *HyperliquidTokenDeployInfo `protobuf:"bytes,8,opt,name=deploy_info,json=deployInfo,proto3" json:"deploy_info,omitempty"`
	Geneses           []*HyperliquidTokenGenesis  `protobuf:"bytes,9,rep,name=geneses,proto3" json:"geneses,omitempty"`
	HlqBalance        float64                     `protobuf:"fixed64,10,opt,name=hlq_balance,json=hlqBalance,proto3" json:"hlq_balance,omitempty"`
	FullName          string                      `protobuf:"bytes,11,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	Statistics        *HyperliquidTokenStatistics `protobuf:"bytes,12,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *HyperliquidToken) Reset() {
	*x = HyperliquidToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidToken) ProtoMessage() {}

func (x *HyperliquidToken) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidToken.ProtoReflect.Descriptor instead.
func (*HyperliquidToken) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{0}
}

func (x *HyperliquidToken) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HyperliquidToken) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HyperliquidToken) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *HyperliquidToken) GetSzDecimals() int64 {
	if x != nil {
		return x.SzDecimals
	}
	return 0
}

func (x *HyperliquidToken) GetWeiDecimals() int64 {
	if x != nil {
		return x.WeiDecimals
	}
	return 0
}

func (x *HyperliquidToken) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *HyperliquidToken) GetCirculatingSupply() float64 {
	if x != nil {
		return x.CirculatingSupply
	}
	return 0
}

func (x *HyperliquidToken) GetDeployInfo() *HyperliquidTokenDeployInfo {
	if x != nil {
		return x.DeployInfo
	}
	return nil
}

func (x *HyperliquidToken) GetGeneses() []*HyperliquidTokenGenesis {
	if x != nil {
		return x.Geneses
	}
	return nil
}

func (x *HyperliquidToken) GetHlqBalance() float64 {
	if x != nil {
		return x.HlqBalance
	}
	return 0
}

func (x *HyperliquidToken) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *HyperliquidToken) GetStatistics() *HyperliquidTokenStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type HyperliquidTokenHolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance float64 `protobuf:"fixed64,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Address string  `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Type    string  `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *HyperliquidTokenHolder) Reset() {
	*x = HyperliquidTokenHolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidTokenHolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidTokenHolder) ProtoMessage() {}

func (x *HyperliquidTokenHolder) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidTokenHolder.ProtoReflect.Descriptor instead.
func (*HyperliquidTokenHolder) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{1}
}

func (x *HyperliquidTokenHolder) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *HyperliquidTokenHolder) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *HyperliquidTokenHolder) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type HyperliquidTokenHoldersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId int64 `protobuf:"varint,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
}

func (x *HyperliquidTokenHoldersRequest) Reset() {
	*x = HyperliquidTokenHoldersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidTokenHoldersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidTokenHoldersRequest) ProtoMessage() {}

func (x *HyperliquidTokenHoldersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidTokenHoldersRequest.ProtoReflect.Descriptor instead.
func (*HyperliquidTokenHoldersRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{2}
}

func (x *HyperliquidTokenHoldersRequest) GetTokenId() int64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

type HyperliquidTokenHoldersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Holders []*HyperliquidTokenHolder `protobuf:"bytes,1,rep,name=holders,proto3" json:"holders,omitempty"`
}

func (x *HyperliquidTokenHoldersResponse) Reset() {
	*x = HyperliquidTokenHoldersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidTokenHoldersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidTokenHoldersResponse) ProtoMessage() {}

func (x *HyperliquidTokenHoldersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidTokenHoldersResponse.ProtoReflect.Descriptor instead.
func (*HyperliquidTokenHoldersResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{3}
}

func (x *HyperliquidTokenHoldersResponse) GetHolders() []*HyperliquidTokenHolder {
	if x != nil {
		return x.Holders
	}
	return nil
}

type HyperliquidTokenStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId                  int64   `protobuf:"varint,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	HolderCount              int64   `protobuf:"varint,2,opt,name=holder_count,json=holderCount,proto3" json:"holder_count,omitempty"`
	ConcentrationCoefficient float64 `protobuf:"fixed64,3,opt,name=concentration_coefficient,json=concentrationCoefficient,proto3" json:"concentration_coefficient,omitempty"`
}

func (x *HyperliquidTokenStatistics) Reset() {
	*x = HyperliquidTokenStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidTokenStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidTokenStatistics) ProtoMessage() {}

func (x *HyperliquidTokenStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidTokenStatistics.ProtoReflect.Descriptor instead.
func (*HyperliquidTokenStatistics) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{4}
}

func (x *HyperliquidTokenStatistics) GetTokenId() int64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *HyperliquidTokenStatistics) GetHolderCount() int64 {
	if x != nil {
		return x.HolderCount
	}
	return 0
}

func (x *HyperliquidTokenStatistics) GetConcentrationCoefficient() float64 {
	if x != nil {
		return x.ConcentrationCoefficient
	}
	return 0
}

type HyperliquidTokenDeployInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId          int64   `protobuf:"varint,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Height           int64   `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Deployer         string  `protobuf:"bytes,3,opt,name=deployer,proto3" json:"deployer,omitempty"`
	RegisterTx       string  `protobuf:"bytes,4,opt,name=register_tx,json=registerTx,proto3" json:"register_tx,omitempty"`
	RegisterSpotTx   string  `protobuf:"bytes,5,opt,name=register_spot_tx,json=registerSpotTx,proto3" json:"register_spot_tx,omitempty"`
	GenesisTx        string  `protobuf:"bytes,6,opt,name=genesis_tx,json=genesisTx,proto3" json:"genesis_tx,omitempty"`
	HyperliquidityTx string  `protobuf:"bytes,7,opt,name=hyperliquidity_tx,json=hyperliquidityTx,proto3" json:"hyperliquidity_tx,omitempty"`
	Hip2Price        float64 `protobuf:"fixed64,8,opt,name=hip2_price,json=hip2Price,proto3" json:"hip2_price,omitempty"`
	Hip2OrderCount   int32   `protobuf:"varint,9,opt,name=hip2_order_count,json=hip2OrderCount,proto3" json:"hip2_order_count,omitempty"`
	Hip2OrderSize    float64 `protobuf:"fixed64,10,opt,name=hip2_order_size,json=hip2OrderSize,proto3" json:"hip2_order_size,omitempty"`
}

func (x *HyperliquidTokenDeployInfo) Reset() {
	*x = HyperliquidTokenDeployInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidTokenDeployInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidTokenDeployInfo) ProtoMessage() {}

func (x *HyperliquidTokenDeployInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidTokenDeployInfo.ProtoReflect.Descriptor instead.
func (*HyperliquidTokenDeployInfo) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{5}
}

func (x *HyperliquidTokenDeployInfo) GetTokenId() int64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *HyperliquidTokenDeployInfo) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *HyperliquidTokenDeployInfo) GetDeployer() string {
	if x != nil {
		return x.Deployer
	}
	return ""
}

func (x *HyperliquidTokenDeployInfo) GetRegisterTx() string {
	if x != nil {
		return x.RegisterTx
	}
	return ""
}

func (x *HyperliquidTokenDeployInfo) GetRegisterSpotTx() string {
	if x != nil {
		return x.RegisterSpotTx
	}
	return ""
}

func (x *HyperliquidTokenDeployInfo) GetGenesisTx() string {
	if x != nil {
		return x.GenesisTx
	}
	return ""
}

func (x *HyperliquidTokenDeployInfo) GetHyperliquidityTx() string {
	if x != nil {
		return x.HyperliquidityTx
	}
	return ""
}

func (x *HyperliquidTokenDeployInfo) GetHip2Price() float64 {
	if x != nil {
		return x.Hip2Price
	}
	return 0
}

func (x *HyperliquidTokenDeployInfo) GetHip2OrderCount() int32 {
	if x != nil {
		return x.Hip2OrderCount
	}
	return 0
}

func (x *HyperliquidTokenDeployInfo) GetHip2OrderSize() float64 {
	if x != nil {
		return x.Hip2OrderSize
	}
	return 0
}

type HyperliquidTokenGenesis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId       int64                  `protobuf:"varint,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Target        string                 `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Amount        float64                `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Type          string                 `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	TargetTokenId *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=target_token_id,json=targetTokenId,proto3" json:"target_token_id,omitempty"`
}

func (x *HyperliquidTokenGenesis) Reset() {
	*x = HyperliquidTokenGenesis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidTokenGenesis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidTokenGenesis) ProtoMessage() {}

func (x *HyperliquidTokenGenesis) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidTokenGenesis.ProtoReflect.Descriptor instead.
func (*HyperliquidTokenGenesis) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{6}
}

func (x *HyperliquidTokenGenesis) GetTokenId() int64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *HyperliquidTokenGenesis) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *HyperliquidTokenGenesis) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *HyperliquidTokenGenesis) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *HyperliquidTokenGenesis) GetTargetTokenId() *wrapperspb.Int64Value {
	if x != nil {
		return x.TargetTokenId
	}
	return nil
}

type HyperliquidSpotPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BaseId         int64             `protobuf:"varint,3,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
	Base           *HyperliquidToken `protobuf:"bytes,4,opt,name=base,proto3" json:"base,omitempty"`
	QuoteId        int64             `protobuf:"varint,5,opt,name=quote_id,json=quoteId,proto3" json:"quote_id,omitempty"`
	Quote          *HyperliquidToken `protobuf:"bytes,6,opt,name=quote,proto3" json:"quote,omitempty"`
	Index          int64             `protobuf:"varint,7,opt,name=index,proto3" json:"index,omitempty"`
	MidPrice       float64           `protobuf:"fixed64,8,opt,name=mid_price,json=midPrice,proto3" json:"mid_price,omitempty"`
	MarkPrice      float64           `protobuf:"fixed64,9,opt,name=mark_price,json=markPrice,proto3" json:"mark_price,omitempty"`
	DailyNtlVolume float64           `protobuf:"fixed64,10,opt,name=daily_ntl_volume,json=dailyNtlVolume,proto3" json:"daily_ntl_volume,omitempty"`
	PreviousDayPx  float64           `protobuf:"fixed64,11,opt,name=previous_day_px,json=previousDayPx,proto3" json:"previous_day_px,omitempty"`
}

func (x *HyperliquidSpotPair) Reset() {
	*x = HyperliquidSpotPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidSpotPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidSpotPair) ProtoMessage() {}

func (x *HyperliquidSpotPair) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidSpotPair.ProtoReflect.Descriptor instead.
func (*HyperliquidSpotPair) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{7}
}

func (x *HyperliquidSpotPair) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HyperliquidSpotPair) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HyperliquidSpotPair) GetBaseId() int64 {
	if x != nil {
		return x.BaseId
	}
	return 0
}

func (x *HyperliquidSpotPair) GetBase() *HyperliquidToken {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *HyperliquidSpotPair) GetQuoteId() int64 {
	if x != nil {
		return x.QuoteId
	}
	return 0
}

func (x *HyperliquidSpotPair) GetQuote() *HyperliquidToken {
	if x != nil {
		return x.Quote
	}
	return nil
}

func (x *HyperliquidSpotPair) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *HyperliquidSpotPair) GetMidPrice() float64 {
	if x != nil {
		return x.MidPrice
	}
	return 0
}

func (x *HyperliquidSpotPair) GetMarkPrice() float64 {
	if x != nil {
		return x.MarkPrice
	}
	return 0
}

func (x *HyperliquidSpotPair) GetDailyNtlVolume() float64 {
	if x != nil {
		return x.DailyNtlVolume
	}
	return 0
}

func (x *HyperliquidSpotPair) GetPreviousDayPx() float64 {
	if x != nil {
		return x.PreviousDayPx
	}
	return 0
}

type HyperliquidPerpPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Index          int64   `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	MidPrice       float64 `protobuf:"fixed64,4,opt,name=mid_price,json=midPrice,proto3" json:"mid_price,omitempty"`
	MarkPrice      float64 `protobuf:"fixed64,5,opt,name=mark_price,json=markPrice,proto3" json:"mark_price,omitempty"`
	DailyNtlVolume float64 `protobuf:"fixed64,6,opt,name=daily_ntl_volume,json=dailyNtlVolume,proto3" json:"daily_ntl_volume,omitempty"`
	PreviousDayPx  float64 `protobuf:"fixed64,7,opt,name=previous_day_px,json=previousDayPx,proto3" json:"previous_day_px,omitempty"`
	Funding        float64 `protobuf:"fixed64,8,opt,name=funding,proto3" json:"funding,omitempty"`
	OpenInterest   float64 `protobuf:"fixed64,9,opt,name=open_interest,json=openInterest,proto3" json:"open_interest,omitempty"`
	Premium        float64 `protobuf:"fixed64,10,opt,name=premium,proto3" json:"premium,omitempty"`
}

func (x *HyperliquidPerpPair) Reset() {
	*x = HyperliquidPerpPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidPerpPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidPerpPair) ProtoMessage() {}

func (x *HyperliquidPerpPair) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidPerpPair.ProtoReflect.Descriptor instead.
func (*HyperliquidPerpPair) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{8}
}

func (x *HyperliquidPerpPair) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HyperliquidPerpPair) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HyperliquidPerpPair) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *HyperliquidPerpPair) GetMidPrice() float64 {
	if x != nil {
		return x.MidPrice
	}
	return 0
}

func (x *HyperliquidPerpPair) GetMarkPrice() float64 {
	if x != nil {
		return x.MarkPrice
	}
	return 0
}

func (x *HyperliquidPerpPair) GetDailyNtlVolume() float64 {
	if x != nil {
		return x.DailyNtlVolume
	}
	return 0
}

func (x *HyperliquidPerpPair) GetPreviousDayPx() float64 {
	if x != nil {
		return x.PreviousDayPx
	}
	return 0
}

func (x *HyperliquidPerpPair) GetFunding() float64 {
	if x != nil {
		return x.Funding
	}
	return 0
}

func (x *HyperliquidPerpPair) GetOpenInterest() float64 {
	if x != nil {
		return x.OpenInterest
	}
	return 0
}

func (x *HyperliquidPerpPair) GetPremium() float64 {
	if x != nil {
		return x.Premium
	}
	return 0
}

type HyperliquidWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TelegramId      *wrapperspb.Int64Value       `protobuf:"bytes,3,opt,name=telegram_id,json=telegramId,proto3" json:"telegram_id,omitempty"`
	EthereumAddress string                       `protobuf:"bytes,4,opt,name=ethereum_address,json=ethereumAddress,proto3" json:"ethereum_address,omitempty"`
	Points          int32                        `protobuf:"varint,5,opt,name=points,proto3" json:"points,omitempty"`
	Movements       []*HyperliquidWalletMovement `protobuf:"bytes,6,rep,name=movements,proto3" json:"movements,omitempty"`
	SpotBalances    []*HyperliquidWalletBalance  `protobuf:"bytes,7,rep,name=spot_balances,json=spotBalances,proto3" json:"spot_balances,omitempty"`
	LaunchBalances  []*HyperliquidLaunchBalance  `protobuf:"bytes,8,rep,name=launch_balances,json=launchBalances,proto3" json:"launch_balances,omitempty"`
	IsAgent         bool                         `protobuf:"varint,9,opt,name=is_agent,json=isAgent,proto3" json:"is_agent,omitempty"`
	IsReadOnly      bool                         `protobuf:"varint,10,opt,name=is_read_only,json=isReadOnly,proto3" json:"is_read_only,omitempty"`
}

func (x *HyperliquidWallet) Reset() {
	*x = HyperliquidWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidWallet) ProtoMessage() {}

func (x *HyperliquidWallet) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidWallet.ProtoReflect.Descriptor instead.
func (*HyperliquidWallet) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{9}
}

func (x *HyperliquidWallet) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HyperliquidWallet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HyperliquidWallet) GetTelegramId() *wrapperspb.Int64Value {
	if x != nil {
		return x.TelegramId
	}
	return nil
}

func (x *HyperliquidWallet) GetEthereumAddress() string {
	if x != nil {
		return x.EthereumAddress
	}
	return ""
}

func (x *HyperliquidWallet) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *HyperliquidWallet) GetMovements() []*HyperliquidWalletMovement {
	if x != nil {
		return x.Movements
	}
	return nil
}

func (x *HyperliquidWallet) GetSpotBalances() []*HyperliquidWalletBalance {
	if x != nil {
		return x.SpotBalances
	}
	return nil
}

func (x *HyperliquidWallet) GetLaunchBalances() []*HyperliquidLaunchBalance {
	if x != nil {
		return x.LaunchBalances
	}
	return nil
}

func (x *HyperliquidWallet) GetIsAgent() bool {
	if x != nil {
		return x.IsAgent
	}
	return false
}

func (x *HyperliquidWallet) GetIsReadOnly() bool {
	if x != nil {
		return x.IsReadOnly
	}
	return false
}

type HyperliquidPublicWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EthereumAddress string `protobuf:"bytes,1,opt,name=ethereum_address,json=ethereumAddress,proto3" json:"ethereum_address,omitempty"`
}

func (x *HyperliquidPublicWallet) Reset() {
	*x = HyperliquidPublicWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidPublicWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidPublicWallet) ProtoMessage() {}

func (x *HyperliquidPublicWallet) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidPublicWallet.ProtoReflect.Descriptor instead.
func (*HyperliquidPublicWallet) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{10}
}

func (x *HyperliquidPublicWallet) GetEthereumAddress() string {
	if x != nil {
		return x.EthereumAddress
	}
	return ""
}

type HyperliquidWalletMovement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramId  *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=telegram_id,json=telegramId,proto3" json:"telegram_id,omitempty"`
	Wallet      *HyperliquidWallet     `protobuf:"bytes,2,opt,name=wallet,proto3" json:"wallet,omitempty"`
	WalletId    int64                  `protobuf:"varint,3,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Hash        string                 `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	Type        string                 `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	TokenId     int64                  `protobuf:"varint,6,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Token       *HyperliquidToken      `protobuf:"bytes,7,opt,name=token,proto3" json:"token,omitempty"`
	Amount      float64                `protobuf:"fixed64,8,opt,name=amount,proto3" json:"amount,omitempty"`
	UsdcValue   float64                `protobuf:"fixed64,9,opt,name=usdc_value,json=usdcValue,proto3" json:"usdc_value,omitempty"`
	Destination string                 `protobuf:"bytes,10,opt,name=destination,proto3" json:"destination,omitempty"`
	Fee         float64                `protobuf:"fixed64,11,opt,name=fee,proto3" json:"fee,omitempty"`
	Timestamp   *wrapperspb.Int64Value `protobuf:"bytes,12,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *HyperliquidWalletMovement) Reset() {
	*x = HyperliquidWalletMovement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidWalletMovement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidWalletMovement) ProtoMessage() {}

func (x *HyperliquidWalletMovement) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidWalletMovement.ProtoReflect.Descriptor instead.
func (*HyperliquidWalletMovement) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{11}
}

func (x *HyperliquidWalletMovement) GetTelegramId() *wrapperspb.Int64Value {
	if x != nil {
		return x.TelegramId
	}
	return nil
}

func (x *HyperliquidWalletMovement) GetWallet() *HyperliquidWallet {
	if x != nil {
		return x.Wallet
	}
	return nil
}

func (x *HyperliquidWalletMovement) GetWalletId() int64 {
	if x != nil {
		return x.WalletId
	}
	return 0
}

func (x *HyperliquidWalletMovement) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *HyperliquidWalletMovement) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *HyperliquidWalletMovement) GetTokenId() int64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *HyperliquidWalletMovement) GetToken() *HyperliquidToken {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *HyperliquidWalletMovement) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *HyperliquidWalletMovement) GetUsdcValue() float64 {
	if x != nil {
		return x.UsdcValue
	}
	return 0
}

func (x *HyperliquidWalletMovement) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *HyperliquidWalletMovement) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *HyperliquidWalletMovement) GetTimestamp() *wrapperspb.Int64Value {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type HyperliquidWalletBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramId *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=telegram_id,json=telegramId,proto3" json:"telegram_id,omitempty"`
	WalletId   int64                  `protobuf:"varint,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TokenId    int64                  `protobuf:"varint,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Balance    float64                `protobuf:"fixed64,4,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *HyperliquidWalletBalance) Reset() {
	*x = HyperliquidWalletBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidWalletBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidWalletBalance) ProtoMessage() {}

func (x *HyperliquidWalletBalance) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidWalletBalance.ProtoReflect.Descriptor instead.
func (*HyperliquidWalletBalance) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{12}
}

func (x *HyperliquidWalletBalance) GetTelegramId() *wrapperspb.Int64Value {
	if x != nil {
		return x.TelegramId
	}
	return nil
}

func (x *HyperliquidWalletBalance) GetWalletId() int64 {
	if x != nil {
		return x.WalletId
	}
	return 0
}

func (x *HyperliquidWalletBalance) GetTokenId() int64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *HyperliquidWalletBalance) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type HyperliquidLaunchBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramId *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=telegram_id,json=telegramId,proto3" json:"telegram_id,omitempty"`
	WalletId   int64                  `protobuf:"varint,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	LaunchId   int64                  `protobuf:"varint,3,opt,name=launch_id,json=launchId,proto3" json:"launch_id,omitempty"`
	Balance    int64                  `protobuf:"varint,4,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *HyperliquidLaunchBalance) Reset() {
	*x = HyperliquidLaunchBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchBalance) ProtoMessage() {}

func (x *HyperliquidLaunchBalance) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchBalance.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchBalance) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{13}
}

func (x *HyperliquidLaunchBalance) GetTelegramId() *wrapperspb.Int64Value {
	if x != nil {
		return x.TelegramId
	}
	return nil
}

func (x *HyperliquidLaunchBalance) GetWalletId() int64 {
	if x != nil {
		return x.WalletId
	}
	return 0
}

func (x *HyperliquidLaunchBalance) GetLaunchId() int64 {
	if x != nil {
		return x.LaunchId
	}
	return 0
}

func (x *HyperliquidLaunchBalance) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type HyperliquidWalletDeploySession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64                                             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TelegramId      *wrapperspb.Int64Value                            `protobuf:"bytes,2,opt,name=telegram_id,json=telegramId,proto3" json:"telegram_id,omitempty"`
	Step            int32                                             `protobuf:"varint,3,opt,name=step,proto3" json:"step,omitempty"`
	TokenName       string                                            `protobuf:"bytes,4,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
	FullName        string                                            `protobuf:"bytes,5,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	TokenDecimals   int32                                             `protobuf:"varint,6,opt,name=token_decimals,json=tokenDecimals,proto3" json:"token_decimals,omitempty"`
	TokenWei        int32                                             `protobuf:"varint,7,opt,name=token_wei,json=tokenWei,proto3" json:"token_wei,omitempty"`
	TokenSupply     float64                                           `protobuf:"fixed64,8,opt,name=token_supply,json=tokenSupply,proto3" json:"token_supply,omitempty"`
	StartMarketCap  int32                                             `protobuf:"varint,9,opt,name=start_market_cap,json=startMarketCap,proto3" json:"start_market_cap,omitempty"`
	Anchor1TokenId  *wrapperspb.Int64Value                            `protobuf:"bytes,10,opt,name=anchor1_token_id,json=anchor1TokenId,proto3" json:"anchor1_token_id,omitempty"`
	Anchor1Token    *HyperliquidToken                                 `protobuf:"bytes,11,opt,name=anchor1_token,json=anchor1Token,proto3" json:"anchor1_token,omitempty"`
	Anchor2TokenId  *wrapperspb.Int64Value                            `protobuf:"bytes,12,opt,name=anchor2_token_id,json=anchor2TokenId,proto3" json:"anchor2_token_id,omitempty"`
	Anchor2Token    *HyperliquidToken                                 `protobuf:"bytes,13,opt,name=anchor2_token,json=anchor2Token,proto3" json:"anchor2_token,omitempty"`
	TokenId         *wrapperspb.Int64Value                            `protobuf:"bytes,14,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	SpotPairId      int32                                             `protobuf:"varint,15,opt,name=spot_pair_id,json=spotPairId,proto3" json:"spot_pair_id,omitempty"`
	DeployThreshold float64                                           `protobuf:"fixed64,16,opt,name=deploy_threshold,json=deployThreshold,proto3" json:"deploy_threshold,omitempty"`
	Geneses         map[string]*HyperliquidWalletDeploySessionGenesis `protobuf:"bytes,17,rep,name=geneses,proto3" json:"geneses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HyperliquidWalletDeploySession) Reset() {
	*x = HyperliquidWalletDeploySession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidWalletDeploySession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidWalletDeploySession) ProtoMessage() {}

func (x *HyperliquidWalletDeploySession) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidWalletDeploySession.ProtoReflect.Descriptor instead.
func (*HyperliquidWalletDeploySession) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{14}
}

func (x *HyperliquidWalletDeploySession) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HyperliquidWalletDeploySession) GetTelegramId() *wrapperspb.Int64Value {
	if x != nil {
		return x.TelegramId
	}
	return nil
}

func (x *HyperliquidWalletDeploySession) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *HyperliquidWalletDeploySession) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *HyperliquidWalletDeploySession) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *HyperliquidWalletDeploySession) GetTokenDecimals() int32 {
	if x != nil {
		return x.TokenDecimals
	}
	return 0
}

func (x *HyperliquidWalletDeploySession) GetTokenWei() int32 {
	if x != nil {
		return x.TokenWei
	}
	return 0
}

func (x *HyperliquidWalletDeploySession) GetTokenSupply() float64 {
	if x != nil {
		return x.TokenSupply
	}
	return 0
}

func (x *HyperliquidWalletDeploySession) GetStartMarketCap() int32 {
	if x != nil {
		return x.StartMarketCap
	}
	return 0
}

func (x *HyperliquidWalletDeploySession) GetAnchor1TokenId() *wrapperspb.Int64Value {
	if x != nil {
		return x.Anchor1TokenId
	}
	return nil
}

func (x *HyperliquidWalletDeploySession) GetAnchor1Token() *HyperliquidToken {
	if x != nil {
		return x.Anchor1Token
	}
	return nil
}

func (x *HyperliquidWalletDeploySession) GetAnchor2TokenId() *wrapperspb.Int64Value {
	if x != nil {
		return x.Anchor2TokenId
	}
	return nil
}

func (x *HyperliquidWalletDeploySession) GetAnchor2Token() *HyperliquidToken {
	if x != nil {
		return x.Anchor2Token
	}
	return nil
}

func (x *HyperliquidWalletDeploySession) GetTokenId() *wrapperspb.Int64Value {
	if x != nil {
		return x.TokenId
	}
	return nil
}

func (x *HyperliquidWalletDeploySession) GetSpotPairId() int32 {
	if x != nil {
		return x.SpotPairId
	}
	return 0
}

func (x *HyperliquidWalletDeploySession) GetDeployThreshold() float64 {
	if x != nil {
		return x.DeployThreshold
	}
	return 0
}

func (x *HyperliquidWalletDeploySession) GetGeneses() map[string]*HyperliquidWalletDeploySessionGenesis {
	if x != nil {
		return x.Geneses
	}
	return nil
}

type HyperliquidWalletDeploySessionGenesis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Share  int32  `protobuf:"varint,2,opt,name=share,proto3" json:"share,omitempty"`
}

func (x *HyperliquidWalletDeploySessionGenesis) Reset() {
	*x = HyperliquidWalletDeploySessionGenesis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidWalletDeploySessionGenesis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidWalletDeploySessionGenesis) ProtoMessage() {}

func (x *HyperliquidWalletDeploySessionGenesis) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidWalletDeploySessionGenesis.ProtoReflect.Descriptor instead.
func (*HyperliquidWalletDeploySessionGenesis) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{15}
}

func (x *HyperliquidWalletDeploySessionGenesis) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *HyperliquidWalletDeploySessionGenesis) GetShare() int32 {
	if x != nil {
		return x.Share
	}
	return 0
}

type HyperliquidLaunch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64                           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TelegramId         int64                           `protobuf:"varint,2,opt,name=telegram_id,json=telegramId,proto3" json:"telegram_id,omitempty"`
	TelegramUser       *TelegramUserPublic             `protobuf:"bytes,3,opt,name=telegram_user,json=telegramUser,proto3" json:"telegram_user,omitempty"`
	Description        string                          `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Listed             bool                            `protobuf:"varint,5,opt,name=listed,proto3" json:"listed,omitempty"`
	Settled            bool                            `protobuf:"varint,6,opt,name=settled,proto3" json:"settled,omitempty"`
	X0                 int64                           `protobuf:"varint,7,opt,name=x0,proto3" json:"x0,omitempty"`
	SessionId          int64                           `protobuf:"varint,8,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Session            *HyperliquidWalletDeploySession `protobuf:"bytes,9,opt,name=session,proto3" json:"session,omitempty"`
	MediaFileId        string                          `protobuf:"bytes,10,opt,name=media_file_id,json=mediaFileId,proto3" json:"media_file_id,omitempty"`
	TopicId            *wrapperspb.Int64Value          `protobuf:"bytes,11,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	X                  int64                           `protobuf:"varint,12,opt,name=x,proto3" json:"x,omitempty"`
	Y                  int64                           `protobuf:"varint,13,opt,name=y,proto3" json:"y,omitempty"`
	K                  int64                           `protobuf:"varint,14,opt,name=k,proto3" json:"k,omitempty"`
	Fills              []*HyperliquidLaunchFill        `protobuf:"bytes,15,rep,name=fills,proto3" json:"fills,omitempty"`
	DailyNtlVolume     float64                         `protobuf:"fixed64,16,opt,name=daily_ntl_volume,json=dailyNtlVolume,proto3" json:"daily_ntl_volume,omitempty"`
	PreviousDayPx      float64                         `protobuf:"fixed64,17,opt,name=previous_day_px,json=previousDayPx,proto3" json:"previous_day_px,omitempty"`
	LastEventTimestamp int64                           `protobuf:"varint,18,opt,name=last_event_timestamp,json=lastEventTimestamp,proto3" json:"last_event_timestamp,omitempty"`
	PoolType           HyperliquidLaunchPoolType       `protobuf:"varint,19,opt,name=pool_type,json=poolType,proto3,enum=hypurr.HyperliquidLaunchPoolType" json:"pool_type,omitempty"`
	Decimals           int64                           `protobuf:"varint,20,opt,name=decimals,proto3" json:"decimals,omitempty"`
	SessionWallet      *HyperliquidPublicWallet        `protobuf:"bytes,21,opt,name=session_wallet,json=sessionWallet,proto3" json:"session_wallet,omitempty"`
	MediaType          string                          `protobuf:"bytes,22,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	ListedTimestamp    int64                           `protobuf:"varint,23,opt,name=listed_timestamp,json=listedTimestamp,proto3" json:"listed_timestamp,omitempty"`
	DevWallet          *HyperliquidPublicWallet        `protobuf:"bytes,24,opt,name=dev_wallet,json=devWallet,proto3" json:"dev_wallet,omitempty"`
	DevLockup          int64                           `protobuf:"varint,25,opt,name=dev_lockup,json=devLockup,proto3" json:"dev_lockup,omitempty"`
}

func (x *HyperliquidLaunch) Reset() {
	*x = HyperliquidLaunch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunch) ProtoMessage() {}

func (x *HyperliquidLaunch) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunch.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunch) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{16}
}

func (x *HyperliquidLaunch) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HyperliquidLaunch) GetTelegramId() int64 {
	if x != nil {
		return x.TelegramId
	}
	return 0
}

func (x *HyperliquidLaunch) GetTelegramUser() *TelegramUserPublic {
	if x != nil {
		return x.TelegramUser
	}
	return nil
}

func (x *HyperliquidLaunch) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *HyperliquidLaunch) GetListed() bool {
	if x != nil {
		return x.Listed
	}
	return false
}

func (x *HyperliquidLaunch) GetSettled() bool {
	if x != nil {
		return x.Settled
	}
	return false
}

func (x *HyperliquidLaunch) GetX0() int64 {
	if x != nil {
		return x.X0
	}
	return 0
}

func (x *HyperliquidLaunch) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *HyperliquidLaunch) GetSession() *HyperliquidWalletDeploySession {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *HyperliquidLaunch) GetMediaFileId() string {
	if x != nil {
		return x.MediaFileId
	}
	return ""
}

func (x *HyperliquidLaunch) GetTopicId() *wrapperspb.Int64Value {
	if x != nil {
		return x.TopicId
	}
	return nil
}

func (x *HyperliquidLaunch) GetX() int64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *HyperliquidLaunch) GetY() int64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *HyperliquidLaunch) GetK() int64 {
	if x != nil {
		return x.K
	}
	return 0
}

func (x *HyperliquidLaunch) GetFills() []*HyperliquidLaunchFill {
	if x != nil {
		return x.Fills
	}
	return nil
}

func (x *HyperliquidLaunch) GetDailyNtlVolume() float64 {
	if x != nil {
		return x.DailyNtlVolume
	}
	return 0
}

func (x *HyperliquidLaunch) GetPreviousDayPx() float64 {
	if x != nil {
		return x.PreviousDayPx
	}
	return 0
}

func (x *HyperliquidLaunch) GetLastEventTimestamp() int64 {
	if x != nil {
		return x.LastEventTimestamp
	}
	return 0
}

func (x *HyperliquidLaunch) GetPoolType() HyperliquidLaunchPoolType {
	if x != nil {
		return x.PoolType
	}
	return HyperliquidLaunchPoolType_Quadratic
}

func (x *HyperliquidLaunch) GetDecimals() int64 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *HyperliquidLaunch) GetSessionWallet() *HyperliquidPublicWallet {
	if x != nil {
		return x.SessionWallet
	}
	return nil
}

func (x *HyperliquidLaunch) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *HyperliquidLaunch) GetListedTimestamp() int64 {
	if x != nil {
		return x.ListedTimestamp
	}
	return 0
}

func (x *HyperliquidLaunch) GetDevWallet() *HyperliquidPublicWallet {
	if x != nil {
		return x.DevWallet
	}
	return nil
}

func (x *HyperliquidLaunch) GetDevLockup() int64 {
	if x != nil {
		return x.DevLockup
	}
	return 0
}

type HyperliquidLaunchFill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchId     int64                    `protobuf:"varint,1,opt,name=launch_id,json=launchId,proto3" json:"launch_id,omitempty"`
	TelegramId   int64                    `protobuf:"varint,2,opt,name=telegram_id,json=telegramId,proto3" json:"telegram_id,omitempty"`
	Telegram     *TelegramUserPublic      `protobuf:"bytes,3,opt,name=telegram,proto3" json:"telegram,omitempty"`
	Wallet       *HyperliquidPublicWallet `protobuf:"bytes,4,opt,name=wallet,proto3" json:"wallet,omitempty"`
	UsdcDelta    int64                    `protobuf:"varint,5,opt,name=usdc_delta,json=usdcDelta,proto3" json:"usdc_delta,omitempty"`
	LaunchDelta  int64                    `protobuf:"varint,6,opt,name=launch_delta,json=launchDelta,proto3" json:"launch_delta,omitempty"`
	Timestamp    int64                    `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	MovementHash *wrapperspb.StringValue  `protobuf:"bytes,8,opt,name=movement_hash,json=movementHash,proto3" json:"movement_hash,omitempty"`
	Id           int64                    `protobuf:"varint,9,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *HyperliquidLaunchFill) Reset() {
	*x = HyperliquidLaunchFill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchFill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchFill) ProtoMessage() {}

func (x *HyperliquidLaunchFill) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchFill.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchFill) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{17}
}

func (x *HyperliquidLaunchFill) GetLaunchId() int64 {
	if x != nil {
		return x.LaunchId
	}
	return 0
}

func (x *HyperliquidLaunchFill) GetTelegramId() int64 {
	if x != nil {
		return x.TelegramId
	}
	return 0
}

func (x *HyperliquidLaunchFill) GetTelegram() *TelegramUserPublic {
	if x != nil {
		return x.Telegram
	}
	return nil
}

func (x *HyperliquidLaunchFill) GetWallet() *HyperliquidPublicWallet {
	if x != nil {
		return x.Wallet
	}
	return nil
}

func (x *HyperliquidLaunchFill) GetUsdcDelta() int64 {
	if x != nil {
		return x.UsdcDelta
	}
	return 0
}

func (x *HyperliquidLaunchFill) GetLaunchDelta() int64 {
	if x != nil {
		return x.LaunchDelta
	}
	return 0
}

func (x *HyperliquidLaunchFill) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *HyperliquidLaunchFill) GetMovementHash() *wrapperspb.StringValue {
	if x != nil {
		return x.MovementHash
	}
	return nil
}

func (x *HyperliquidLaunchFill) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type TelegramUserPublic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username        string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	PictureFileId   string `protobuf:"bytes,3,opt,name=picture_file_id,json=pictureFileId,proto3" json:"picture_file_id,omitempty"`
	ReputationScore int64  `protobuf:"varint,4,opt,name=reputation_score,json=reputationScore,proto3" json:"reputation_score,omitempty"`
}

func (x *TelegramUserPublic) Reset() {
	*x = TelegramUserPublic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelegramUserPublic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelegramUserPublic) ProtoMessage() {}

func (x *TelegramUserPublic) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelegramUserPublic.ProtoReflect.Descriptor instead.
func (*TelegramUserPublic) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{18}
}

func (x *TelegramUserPublic) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TelegramUserPublic) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TelegramUserPublic) GetPictureFileId() string {
	if x != nil {
		return x.PictureFileId
	}
	return ""
}

func (x *TelegramUserPublic) GetReputationScore() int64 {
	if x != nil {
		return x.ReputationScore
	}
	return 0
}

type HyperliquidDeployAuction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime  int64                   `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Duration   int64                   `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	StartGas   float64                 `protobuf:"fixed64,3,opt,name=start_gas,json=startGas,proto3" json:"start_gas,omitempty"`
	CurrentGas *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=current_gas,json=currentGas,proto3" json:"current_gas,omitempty"`
	EndGas     *wrapperspb.DoubleValue `protobuf:"bytes,5,opt,name=end_gas,json=endGas,proto3" json:"end_gas,omitempty"`
}

func (x *HyperliquidDeployAuction) Reset() {
	*x = HyperliquidDeployAuction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidDeployAuction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidDeployAuction) ProtoMessage() {}

func (x *HyperliquidDeployAuction) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidDeployAuction.ProtoReflect.Descriptor instead.
func (*HyperliquidDeployAuction) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{19}
}

func (x *HyperliquidDeployAuction) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *HyperliquidDeployAuction) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *HyperliquidDeployAuction) GetStartGas() float64 {
	if x != nil {
		return x.StartGas
	}
	return 0
}

func (x *HyperliquidDeployAuction) GetCurrentGas() *wrapperspb.DoubleValue {
	if x != nil {
		return x.CurrentGas
	}
	return nil
}

func (x *HyperliquidDeployAuction) GetEndGas() *wrapperspb.DoubleValue {
	if x != nil {
		return x.EndGas
	}
	return nil
}

type HyperliquidDeployAuctionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HyperliquidDeployAuctionRequest) Reset() {
	*x = HyperliquidDeployAuctionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidDeployAuctionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidDeployAuctionRequest) ProtoMessage() {}

func (x *HyperliquidDeployAuctionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidDeployAuctionRequest.ProtoReflect.Descriptor instead.
func (*HyperliquidDeployAuctionRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{20}
}

type HyperliquidDeployAuctionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auction *HyperliquidDeployAuction `protobuf:"bytes,1,opt,name=auction,proto3" json:"auction,omitempty"`
}

func (x *HyperliquidDeployAuctionResponse) Reset() {
	*x = HyperliquidDeployAuctionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidDeployAuctionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidDeployAuctionResponse) ProtoMessage() {}

func (x *HyperliquidDeployAuctionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidDeployAuctionResponse.ProtoReflect.Descriptor instead.
func (*HyperliquidDeployAuctionResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{21}
}

func (x *HyperliquidDeployAuctionResponse) GetAuction() *HyperliquidDeployAuction {
	if x != nil {
		return x.Auction
	}
	return nil
}

type HyperliquidTokensRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HyperliquidTokensRequest) Reset() {
	*x = HyperliquidTokensRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidTokensRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidTokensRequest) ProtoMessage() {}

func (x *HyperliquidTokensRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidTokensRequest.ProtoReflect.Descriptor instead.
func (*HyperliquidTokensRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{22}
}

type HyperliquidTokensResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tokens []*HyperliquidToken `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *HyperliquidTokensResponse) Reset() {
	*x = HyperliquidTokensResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidTokensResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidTokensResponse) ProtoMessage() {}

func (x *HyperliquidTokensResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidTokensResponse.ProtoReflect.Descriptor instead.
func (*HyperliquidTokensResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{23}
}

func (x *HyperliquidTokensResponse) GetTokens() []*HyperliquidToken {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type HyperliquidTokenMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Timestamp  int64               `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TokenId    int64               `protobuf:"varint,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	TelegramId int64               `protobuf:"varint,4,opt,name=telegram_id,json=telegramId,proto3" json:"telegram_id,omitempty"`
	Author     *TelegramUserPublic `protobuf:"bytes,5,opt,name=author,proto3" json:"author,omitempty"`
	ChatId     int64               `protobuf:"varint,6,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	TopicId    int64               `protobuf:"varint,7,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Message    string              `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *HyperliquidTokenMessage) Reset() {
	*x = HyperliquidTokenMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidTokenMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidTokenMessage) ProtoMessage() {}

func (x *HyperliquidTokenMessage) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidTokenMessage.ProtoReflect.Descriptor instead.
func (*HyperliquidTokenMessage) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{24}
}

func (x *HyperliquidTokenMessage) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HyperliquidTokenMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *HyperliquidTokenMessage) GetTokenId() int64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *HyperliquidTokenMessage) GetTelegramId() int64 {
	if x != nil {
		return x.TelegramId
	}
	return 0
}

func (x *HyperliquidTokenMessage) GetAuthor() *TelegramUserPublic {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *HyperliquidTokenMessage) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *HyperliquidTokenMessage) GetTopicId() int64 {
	if x != nil {
		return x.TopicId
	}
	return 0
}

func (x *HyperliquidTokenMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type HyperliquidTokenMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId int64 `protobuf:"varint,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
}

func (x *HyperliquidTokenMessagesRequest) Reset() {
	*x = HyperliquidTokenMessagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidTokenMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidTokenMessagesRequest) ProtoMessage() {}

func (x *HyperliquidTokenMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidTokenMessagesRequest.ProtoReflect.Descriptor instead.
func (*HyperliquidTokenMessagesRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{25}
}

func (x *HyperliquidTokenMessagesRequest) GetTokenId() int64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

type HyperliquidTokenMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*HyperliquidTokenMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *HyperliquidTokenMessagesResponse) Reset() {
	*x = HyperliquidTokenMessagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidTokenMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidTokenMessagesResponse) ProtoMessage() {}

func (x *HyperliquidTokenMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidTokenMessagesResponse.ProtoReflect.Descriptor instead.
func (*HyperliquidTokenMessagesResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{26}
}

func (x *HyperliquidTokenMessagesResponse) GetMessages() []*HyperliquidTokenMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

type HyperliquidSpotPairRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *HyperliquidSpotPairRequest) Reset() {
	*x = HyperliquidSpotPairRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidSpotPairRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidSpotPairRequest) ProtoMessage() {}

func (x *HyperliquidSpotPairRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidSpotPairRequest.ProtoReflect.Descriptor instead.
func (*HyperliquidSpotPairRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{27}
}

func (x *HyperliquidSpotPairRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type HyperliquidSpotPairResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pair *HyperliquidSpotPair `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
}

func (x *HyperliquidSpotPairResponse) Reset() {
	*x = HyperliquidSpotPairResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidSpotPairResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidSpotPairResponse) ProtoMessage() {}

func (x *HyperliquidSpotPairResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidSpotPairResponse.ProtoReflect.Descriptor instead.
func (*HyperliquidSpotPairResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{28}
}

func (x *HyperliquidSpotPairResponse) GetPair() *HyperliquidSpotPair {
	if x != nil {
		return x.Pair
	}
	return nil
}

type HyperliquidSpotPairsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HyperliquidSpotPairsRequest) Reset() {
	*x = HyperliquidSpotPairsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidSpotPairsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidSpotPairsRequest) ProtoMessage() {}

func (x *HyperliquidSpotPairsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidSpotPairsRequest.ProtoReflect.Descriptor instead.
func (*HyperliquidSpotPairsRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{29}
}

type HyperliquidSpotPairsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pairs []*HyperliquidSpotPair `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs,omitempty"`
}

func (x *HyperliquidSpotPairsResponse) Reset() {
	*x = HyperliquidSpotPairsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidSpotPairsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidSpotPairsResponse) ProtoMessage() {}

func (x *HyperliquidSpotPairsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidSpotPairsResponse.ProtoReflect.Descriptor instead.
func (*HyperliquidSpotPairsResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{30}
}

func (x *HyperliquidSpotPairsResponse) GetPairs() []*HyperliquidSpotPair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

type HyperliquidPerpPairsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HyperliquidPerpPairsRequest) Reset() {
	*x = HyperliquidPerpPairsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidPerpPairsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidPerpPairsRequest) ProtoMessage() {}

func (x *HyperliquidPerpPairsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidPerpPairsRequest.ProtoReflect.Descriptor instead.
func (*HyperliquidPerpPairsRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{31}
}

type HyperliquidPerpPairsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pairs []*HyperliquidPerpPair `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs,omitempty"`
}

func (x *HyperliquidPerpPairsResponse) Reset() {
	*x = HyperliquidPerpPairsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidPerpPairsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidPerpPairsResponse) ProtoMessage() {}

func (x *HyperliquidPerpPairsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidPerpPairsResponse.ProtoReflect.Descriptor instead.
func (*HyperliquidPerpPairsResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{32}
}

func (x *HyperliquidPerpPairsResponse) GetPairs() []*HyperliquidPerpPair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

type HyperliquidWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EthereumAddress *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=ethereum_address,json=ethereumAddress,proto3" json:"ethereum_address,omitempty"`
}

func (x *HyperliquidWalletRequest) Reset() {
	*x = HyperliquidWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidWalletRequest) ProtoMessage() {}

func (x *HyperliquidWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidWalletRequest.ProtoReflect.Descriptor instead.
func (*HyperliquidWalletRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{33}
}

func (x *HyperliquidWalletRequest) GetEthereumAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.EthereumAddress
	}
	return nil
}

type HyperliquidWalletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wallet *HyperliquidWallet `protobuf:"bytes,1,opt,name=wallet,proto3" json:"wallet,omitempty"`
}

func (x *HyperliquidWalletResponse) Reset() {
	*x = HyperliquidWalletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidWalletResponse) ProtoMessage() {}

func (x *HyperliquidWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidWalletResponse.ProtoReflect.Descriptor instead.
func (*HyperliquidWalletResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{34}
}

func (x *HyperliquidWalletResponse) GetWallet() *HyperliquidWallet {
	if x != nil {
		return x.Wallet
	}
	return nil
}

type HyperliquidLaunchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HyperliquidLaunchesRequest) Reset() {
	*x = HyperliquidLaunchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchesRequest) ProtoMessage() {}

func (x *HyperliquidLaunchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchesRequest.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchesRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{35}
}

type HyperliquidLaunchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Launches []*HyperliquidLaunch `protobuf:"bytes,1,rep,name=launches,proto3" json:"launches,omitempty"`
}

func (x *HyperliquidLaunchesResponse) Reset() {
	*x = HyperliquidLaunchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchesResponse) ProtoMessage() {}

func (x *HyperliquidLaunchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchesResponse.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchesResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{36}
}

func (x *HyperliquidLaunchesResponse) GetLaunches() []*HyperliquidLaunch {
	if x != nil {
		return x.Launches
	}
	return nil
}

type HyperliquidLaunchStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchId *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=launch_id,json=launchId,proto3" json:"launch_id,omitempty"`
}

func (x *HyperliquidLaunchStreamRequest) Reset() {
	*x = HyperliquidLaunchStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchStreamRequest) ProtoMessage() {}

func (x *HyperliquidLaunchStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchStreamRequest.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchStreamRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{37}
}

func (x *HyperliquidLaunchStreamRequest) GetLaunchId() *wrapperspb.Int64Value {
	if x != nil {
		return x.LaunchId
	}
	return nil
}

type HyperliquidLaunchStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Launches []*HyperliquidLaunch `protobuf:"bytes,1,rep,name=launches,proto3" json:"launches,omitempty"`
}

func (x *HyperliquidLaunchStreamResponse) Reset() {
	*x = HyperliquidLaunchStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchStreamResponse) ProtoMessage() {}

func (x *HyperliquidLaunchStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchStreamResponse.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchStreamResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{38}
}

func (x *HyperliquidLaunchStreamResponse) GetLaunches() []*HyperliquidLaunch {
	if x != nil {
		return x.Launches
	}
	return nil
}

type HyperliquidWalletDeploySessionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramId      *wrapperspb.Int64Value  `protobuf:"bytes,1,opt,name=telegram_id,json=telegramId,proto3" json:"telegram_id,omitempty"`
	WalletId        *wrapperspb.Int64Value  `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	SessionId       *wrapperspb.Int64Value  `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	EthereumAddress *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=ethereum_address,json=ethereumAddress,proto3" json:"ethereum_address,omitempty"`
}

func (x *HyperliquidWalletDeploySessionsRequest) Reset() {
	*x = HyperliquidWalletDeploySessionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidWalletDeploySessionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidWalletDeploySessionsRequest) ProtoMessage() {}

func (x *HyperliquidWalletDeploySessionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidWalletDeploySessionsRequest.ProtoReflect.Descriptor instead.
func (*HyperliquidWalletDeploySessionsRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{39}
}

func (x *HyperliquidWalletDeploySessionsRequest) GetTelegramId() *wrapperspb.Int64Value {
	if x != nil {
		return x.TelegramId
	}
	return nil
}

func (x *HyperliquidWalletDeploySessionsRequest) GetWalletId() *wrapperspb.Int64Value {
	if x != nil {
		return x.WalletId
	}
	return nil
}

func (x *HyperliquidWalletDeploySessionsRequest) GetSessionId() *wrapperspb.Int64Value {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *HyperliquidWalletDeploySessionsRequest) GetEthereumAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.EthereumAddress
	}
	return nil
}

type HyperliquidWalletDeploySessionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessions []*HyperliquidWalletDeploySession `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
}

func (x *HyperliquidWalletDeploySessionsResponse) Reset() {
	*x = HyperliquidWalletDeploySessionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidWalletDeploySessionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidWalletDeploySessionsResponse) ProtoMessage() {}

func (x *HyperliquidWalletDeploySessionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidWalletDeploySessionsResponse.ProtoReflect.Descriptor instead.
func (*HyperliquidWalletDeploySessionsResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{40}
}

func (x *HyperliquidWalletDeploySessionsResponse) GetSessions() []*HyperliquidWalletDeploySession {
	if x != nil {
		return x.Sessions
	}
	return nil
}

type SetHyperliquidWalletDeploySessionTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EthereumAddress *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=ethereum_address,json=ethereumAddress,proto3" json:"ethereum_address,omitempty"`
	SessionId       int64                   `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Name            string                  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Target          string                  `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`
	Share           int32                   `protobuf:"varint,5,opt,name=share,proto3" json:"share,omitempty"`
}

func (x *SetHyperliquidWalletDeploySessionTargetRequest) Reset() {
	*x = SetHyperliquidWalletDeploySessionTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHyperliquidWalletDeploySessionTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHyperliquidWalletDeploySessionTargetRequest) ProtoMessage() {}

func (x *SetHyperliquidWalletDeploySessionTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHyperliquidWalletDeploySessionTargetRequest.ProtoReflect.Descriptor instead.
func (*SetHyperliquidWalletDeploySessionTargetRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{41}
}

func (x *SetHyperliquidWalletDeploySessionTargetRequest) GetEthereumAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.EthereumAddress
	}
	return nil
}

func (x *SetHyperliquidWalletDeploySessionTargetRequest) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *SetHyperliquidWalletDeploySessionTargetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SetHyperliquidWalletDeploySessionTargetRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *SetHyperliquidWalletDeploySessionTargetRequest) GetShare() int32 {
	if x != nil {
		return x.Share
	}
	return 0
}

type SetHyperliquidWalletDeploySessionTargetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *HyperliquidWalletDeploySession `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *SetHyperliquidWalletDeploySessionTargetResponse) Reset() {
	*x = SetHyperliquidWalletDeploySessionTargetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHyperliquidWalletDeploySessionTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHyperliquidWalletDeploySessionTargetResponse) ProtoMessage() {}

func (x *SetHyperliquidWalletDeploySessionTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHyperliquidWalletDeploySessionTargetResponse.ProtoReflect.Descriptor instead.
func (*SetHyperliquidWalletDeploySessionTargetResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{42}
}

func (x *SetHyperliquidWalletDeploySessionTargetResponse) GetSession() *HyperliquidWalletDeploySession {
	if x != nil {
		return x.Session
	}
	return nil
}

type DeleteHyperliquidWalletDeploySessionTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EthereumAddress *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=ethereum_address,json=ethereumAddress,proto3" json:"ethereum_address,omitempty"`
	SessionId       int64                   `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Name            string                  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteHyperliquidWalletDeploySessionTargetRequest) Reset() {
	*x = DeleteHyperliquidWalletDeploySessionTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHyperliquidWalletDeploySessionTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHyperliquidWalletDeploySessionTargetRequest) ProtoMessage() {}

func (x *DeleteHyperliquidWalletDeploySessionTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHyperliquidWalletDeploySessionTargetRequest.ProtoReflect.Descriptor instead.
func (*DeleteHyperliquidWalletDeploySessionTargetRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{43}
}

func (x *DeleteHyperliquidWalletDeploySessionTargetRequest) GetEthereumAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.EthereumAddress
	}
	return nil
}

func (x *DeleteHyperliquidWalletDeploySessionTargetRequest) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *DeleteHyperliquidWalletDeploySessionTargetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteHyperliquidWalletDeploySessionTargetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *HyperliquidWalletDeploySession `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *DeleteHyperliquidWalletDeploySessionTargetResponse) Reset() {
	*x = DeleteHyperliquidWalletDeploySessionTargetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHyperliquidWalletDeploySessionTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHyperliquidWalletDeploySessionTargetResponse) ProtoMessage() {}

func (x *DeleteHyperliquidWalletDeploySessionTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHyperliquidWalletDeploySessionTargetResponse.ProtoReflect.Descriptor instead.
func (*DeleteHyperliquidWalletDeploySessionTargetResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{44}
}

func (x *DeleteHyperliquidWalletDeploySessionTargetResponse) GetSession() *HyperliquidWalletDeploySession {
	if x != nil {
		return x.Session
	}
	return nil
}

type HyperliquidLaunchFillsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchId *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=launch_id,json=launchId,proto3" json:"launch_id,omitempty"`
}

func (x *HyperliquidLaunchFillsRequest) Reset() {
	*x = HyperliquidLaunchFillsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchFillsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchFillsRequest) ProtoMessage() {}

func (x *HyperliquidLaunchFillsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchFillsRequest.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchFillsRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{45}
}

func (x *HyperliquidLaunchFillsRequest) GetLaunchId() *wrapperspb.Int64Value {
	if x != nil {
		return x.LaunchId
	}
	return nil
}

type HyperliquidLaunchFillsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fills     []*HyperliquidLaunchFill     `protobuf:"bytes,1,rep,name=fills,proto3" json:"fills,omitempty"`
	Positions []*HyperliquidLaunchPosition `protobuf:"bytes,2,rep,name=positions,proto3" json:"positions,omitempty"`
}

func (x *HyperliquidLaunchFillsResponse) Reset() {
	*x = HyperliquidLaunchFillsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchFillsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchFillsResponse) ProtoMessage() {}

func (x *HyperliquidLaunchFillsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchFillsResponse.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchFillsResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{46}
}

func (x *HyperliquidLaunchFillsResponse) GetFills() []*HyperliquidLaunchFill {
	if x != nil {
		return x.Fills
	}
	return nil
}

func (x *HyperliquidLaunchFillsResponse) GetPositions() []*HyperliquidLaunchPosition {
	if x != nil {
		return x.Positions
	}
	return nil
}

type HyperliquidLaunchPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Balance int64  `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
	Cost    int64  `protobuf:"varint,3,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (x *HyperliquidLaunchPosition) Reset() {
	*x = HyperliquidLaunchPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchPosition) ProtoMessage() {}

func (x *HyperliquidLaunchPosition) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchPosition.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchPosition) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{47}
}

func (x *HyperliquidLaunchPosition) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *HyperliquidLaunchPosition) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *HyperliquidLaunchPosition) GetCost() int64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

type HyperliquidLaunchCandlesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchId int64  `protobuf:"varint,1,opt,name=launch_id,json=launchId,proto3" json:"launch_id,omitempty"`
	Interval string `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *HyperliquidLaunchCandlesRequest) Reset() {
	*x = HyperliquidLaunchCandlesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchCandlesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchCandlesRequest) ProtoMessage() {}

func (x *HyperliquidLaunchCandlesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchCandlesRequest.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchCandlesRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{48}
}

func (x *HyperliquidLaunchCandlesRequest) GetLaunchId() int64 {
	if x != nil {
		return x.LaunchId
	}
	return 0
}

func (x *HyperliquidLaunchCandlesRequest) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

type HyperliquidLaunchCandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time   int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Open   float32 `protobuf:"fixed32,2,opt,name=open,proto3" json:"open,omitempty"`
	High   float32 `protobuf:"fixed32,3,opt,name=high,proto3" json:"high,omitempty"`
	Low    float32 `protobuf:"fixed32,4,opt,name=low,proto3" json:"low,omitempty"`
	Close  float32 `protobuf:"fixed32,5,opt,name=close,proto3" json:"close,omitempty"`
	Volume float32 `protobuf:"fixed32,6,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *HyperliquidLaunchCandle) Reset() {
	*x = HyperliquidLaunchCandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchCandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchCandle) ProtoMessage() {}

func (x *HyperliquidLaunchCandle) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchCandle.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchCandle) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{49}
}

func (x *HyperliquidLaunchCandle) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *HyperliquidLaunchCandle) GetOpen() float32 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *HyperliquidLaunchCandle) GetHigh() float32 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *HyperliquidLaunchCandle) GetLow() float32 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *HyperliquidLaunchCandle) GetClose() float32 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *HyperliquidLaunchCandle) GetVolume() float32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

type HyperliquidLaunchCandlesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Candles []*HyperliquidLaunchCandle `protobuf:"bytes,1,rep,name=candles,proto3" json:"candles,omitempty"`
}

func (x *HyperliquidLaunchCandlesResponse) Reset() {
	*x = HyperliquidLaunchCandlesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchCandlesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchCandlesResponse) ProtoMessage() {}

func (x *HyperliquidLaunchCandlesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchCandlesResponse.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchCandlesResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{50}
}

func (x *HyperliquidLaunchCandlesResponse) GetCandles() []*HyperliquidLaunchCandle {
	if x != nil {
		return x.Candles
	}
	return nil
}

type HyperliquidLaunchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *HyperliquidLaunchRequest) Reset() {
	*x = HyperliquidLaunchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchRequest) ProtoMessage() {}

func (x *HyperliquidLaunchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchRequest.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{51}
}

func (x *HyperliquidLaunchRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type HyperliquidLaunchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Launch *HyperliquidLaunch `protobuf:"bytes,1,opt,name=launch,proto3" json:"launch,omitempty"`
}

func (x *HyperliquidLaunchResponse) Reset() {
	*x = HyperliquidLaunchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchResponse) ProtoMessage() {}

func (x *HyperliquidLaunchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchResponse.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{52}
}

func (x *HyperliquidLaunchResponse) GetLaunch() *HyperliquidLaunch {
	if x != nil {
		return x.Launch
	}
	return nil
}

type HyperliquidLaunchMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Timestamp  int64               `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	LaunchId   int64               `protobuf:"varint,3,opt,name=launch_id,json=launchId,proto3" json:"launch_id,omitempty"`
	TelegramId int64               `protobuf:"varint,4,opt,name=telegram_id,json=telegramId,proto3" json:"telegram_id,omitempty"`
	Author     *TelegramUserPublic `protobuf:"bytes,5,opt,name=author,proto3" json:"author,omitempty"`
	ChatId     int64               `protobuf:"varint,6,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	TopicId    int64               `protobuf:"varint,7,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Message    string              `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *HyperliquidLaunchMessage) Reset() {
	*x = HyperliquidLaunchMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchMessage) ProtoMessage() {}

func (x *HyperliquidLaunchMessage) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchMessage.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchMessage) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{53}
}

func (x *HyperliquidLaunchMessage) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HyperliquidLaunchMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *HyperliquidLaunchMessage) GetLaunchId() int64 {
	if x != nil {
		return x.LaunchId
	}
	return 0
}

func (x *HyperliquidLaunchMessage) GetTelegramId() int64 {
	if x != nil {
		return x.TelegramId
	}
	return 0
}

func (x *HyperliquidLaunchMessage) GetAuthor() *TelegramUserPublic {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *HyperliquidLaunchMessage) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *HyperliquidLaunchMessage) GetTopicId() int64 {
	if x != nil {
		return x.TopicId
	}
	return 0
}

func (x *HyperliquidLaunchMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type HyperliquidLaunchMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchId int64 `protobuf:"varint,1,opt,name=launch_id,json=launchId,proto3" json:"launch_id,omitempty"`
}

func (x *HyperliquidLaunchMessagesRequest) Reset() {
	*x = HyperliquidLaunchMessagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchMessagesRequest) ProtoMessage() {}

func (x *HyperliquidLaunchMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchMessagesRequest.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchMessagesRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{54}
}

func (x *HyperliquidLaunchMessagesRequest) GetLaunchId() int64 {
	if x != nil {
		return x.LaunchId
	}
	return 0
}

type HyperliquidLaunchMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*HyperliquidLaunchMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *HyperliquidLaunchMessagesResponse) Reset() {
	*x = HyperliquidLaunchMessagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchMessagesResponse) ProtoMessage() {}

func (x *HyperliquidLaunchMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchMessagesResponse.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchMessagesResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{55}
}

func (x *HyperliquidLaunchMessagesResponse) GetMessages() []*HyperliquidLaunchMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

type HyperliquidLaunchHolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance int64  `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Type    string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *HyperliquidLaunchHolder) Reset() {
	*x = HyperliquidLaunchHolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchHolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchHolder) ProtoMessage() {}

func (x *HyperliquidLaunchHolder) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchHolder.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchHolder) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{56}
}

func (x *HyperliquidLaunchHolder) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *HyperliquidLaunchHolder) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *HyperliquidLaunchHolder) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type HyperliquidLaunchHoldersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchId int64 `protobuf:"varint,1,opt,name=launch_id,json=launchId,proto3" json:"launch_id,omitempty"`
}

func (x *HyperliquidLaunchHoldersRequest) Reset() {
	*x = HyperliquidLaunchHoldersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchHoldersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchHoldersRequest) ProtoMessage() {}

func (x *HyperliquidLaunchHoldersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchHoldersRequest.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchHoldersRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{57}
}

func (x *HyperliquidLaunchHoldersRequest) GetLaunchId() int64 {
	if x != nil {
		return x.LaunchId
	}
	return 0
}

type HyperliquidLaunchHoldersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Holders []*HyperliquidLaunchHolder `protobuf:"bytes,1,rep,name=holders,proto3" json:"holders,omitempty"`
}

func (x *HyperliquidLaunchHoldersResponse) Reset() {
	*x = HyperliquidLaunchHoldersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchHoldersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchHoldersResponse) ProtoMessage() {}

func (x *HyperliquidLaunchHoldersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchHoldersResponse.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchHoldersResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{58}
}

func (x *HyperliquidLaunchHoldersResponse) GetHolders() []*HyperliquidLaunchHolder {
	if x != nil {
		return x.Holders
	}
	return nil
}

type LatestHyperliquidLaunchFillsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LatestHyperliquidLaunchFillsRequest) Reset() {
	*x = LatestHyperliquidLaunchFillsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestHyperliquidLaunchFillsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestHyperliquidLaunchFillsRequest) ProtoMessage() {}

func (x *LatestHyperliquidLaunchFillsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestHyperliquidLaunchFillsRequest.ProtoReflect.Descriptor instead.
func (*LatestHyperliquidLaunchFillsRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{59}
}

type TelegramUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramId       int64                        `protobuf:"varint,1,opt,name=telegram_id,json=telegramId,proto3" json:"telegram_id,omitempty"`
	TelegramUsername string                       `protobuf:"bytes,2,opt,name=telegram_username,json=telegramUsername,proto3" json:"telegram_username,omitempty"`
	PendingFees      float64                      `protobuf:"fixed64,3,opt,name=pending_fees,json=pendingFees,proto3" json:"pending_fees,omitempty"`
	ReferralRewards  float64                      `protobuf:"fixed64,4,opt,name=referral_rewards,json=referralRewards,proto3" json:"referral_rewards,omitempty"`
	ReferralCode     string                       `protobuf:"bytes,5,opt,name=referral_code,json=referralCode,proto3" json:"referral_code,omitempty"`
	ReferralScore    int64                        `protobuf:"varint,6,opt,name=referral_score,json=referralScore,proto3" json:"referral_score,omitempty"`
	ReferrerId       int64                        `protobuf:"varint,7,opt,name=referrer_id,json=referrerId,proto3" json:"referrer_id,omitempty"`
	Settings         *TelegramUserSettings        `protobuf:"bytes,8,opt,name=settings,proto3" json:"settings,omitempty"`
	Wallet           *HyperliquidWallet           `protobuf:"bytes,9,opt,name=wallet,proto3" json:"wallet,omitempty"`
	Wallets          []*HyperliquidWallet         `protobuf:"bytes,10,rep,name=wallets,proto3" json:"wallets,omitempty"`
	WalletId         int64                        `protobuf:"varint,11,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	SniperWallet     *HyperliquidWallet           `protobuf:"bytes,12,opt,name=sniper_wallet,json=sniperWallet,proto3" json:"sniper_wallet,omitempty"`
	SniperWalletId   int64                        `protobuf:"varint,13,opt,name=sniper_wallet_id,json=sniperWalletId,proto3" json:"sniper_wallet_id,omitempty"`
	DumperWallet     *HyperliquidWallet           `protobuf:"bytes,14,opt,name=dumper_wallet,json=dumperWallet,proto3" json:"dumper_wallet,omitempty"`
	DumperWalletId   int64                        `protobuf:"varint,15,opt,name=dumper_wallet_id,json=dumperWalletId,proto3" json:"dumper_wallet_id,omitempty"`
	ReputationId     int64                        `protobuf:"varint,16,opt,name=reputation_id,json=reputationId,proto3" json:"reputation_id,omitempty"`
	Reputation       *TelegramUserReputation      `protobuf:"bytes,17,opt,name=reputation,proto3" json:"reputation,omitempty"`
	Launches         []*HyperliquidLaunch         `protobuf:"bytes,18,rep,name=launches,proto3" json:"launches,omitempty"`
	Balances         []*HyperliquidWalletBalance  `protobuf:"bytes,19,rep,name=balances,proto3" json:"balances,omitempty"`
	Movements        []*HyperliquidWalletMovement `protobuf:"bytes,20,rep,name=movements,proto3" json:"movements,omitempty"`
	LaunchFills      []*HyperliquidLaunchFill     `protobuf:"bytes,21,rep,name=launch_fills,json=launchFills,proto3" json:"launch_fills,omitempty"`
	Labels           []*HyperliquidWalletLabel    `protobuf:"bytes,22,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *TelegramUser) Reset() {
	*x = TelegramUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelegramUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelegramUser) ProtoMessage() {}

func (x *TelegramUser) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelegramUser.ProtoReflect.Descriptor instead.
func (*TelegramUser) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{60}
}

func (x *TelegramUser) GetTelegramId() int64 {
	if x != nil {
		return x.TelegramId
	}
	return 0
}

func (x *TelegramUser) GetTelegramUsername() string {
	if x != nil {
		return x.TelegramUsername
	}
	return ""
}

func (x *TelegramUser) GetPendingFees() float64 {
	if x != nil {
		return x.PendingFees
	}
	return 0
}

func (x *TelegramUser) GetReferralRewards() float64 {
	if x != nil {
		return x.ReferralRewards
	}
	return 0
}

func (x *TelegramUser) GetReferralCode() string {
	if x != nil {
		return x.ReferralCode
	}
	return ""
}

func (x *TelegramUser) GetReferralScore() int64 {
	if x != nil {
		return x.ReferralScore
	}
	return 0
}

func (x *TelegramUser) GetReferrerId() int64 {
	if x != nil {
		return x.ReferrerId
	}
	return 0
}

func (x *TelegramUser) GetSettings() *TelegramUserSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *TelegramUser) GetWallet() *HyperliquidWallet {
	if x != nil {
		return x.Wallet
	}
	return nil
}

func (x *TelegramUser) GetWallets() []*HyperliquidWallet {
	if x != nil {
		return x.Wallets
	}
	return nil
}

func (x *TelegramUser) GetWalletId() int64 {
	if x != nil {
		return x.WalletId
	}
	return 0
}

func (x *TelegramUser) GetSniperWallet() *HyperliquidWallet {
	if x != nil {
		return x.SniperWallet
	}
	return nil
}

func (x *TelegramUser) GetSniperWalletId() int64 {
	if x != nil {
		return x.SniperWalletId
	}
	return 0
}

func (x *TelegramUser) GetDumperWallet() *HyperliquidWallet {
	if x != nil {
		return x.DumperWallet
	}
	return nil
}

func (x *TelegramUser) GetDumperWalletId() int64 {
	if x != nil {
		return x.DumperWalletId
	}
	return 0
}

func (x *TelegramUser) GetReputationId() int64 {
	if x != nil {
		return x.ReputationId
	}
	return 0
}

func (x *TelegramUser) GetReputation() *TelegramUserReputation {
	if x != nil {
		return x.Reputation
	}
	return nil
}

func (x *TelegramUser) GetLaunches() []*HyperliquidLaunch {
	if x != nil {
		return x.Launches
	}
	return nil
}

func (x *TelegramUser) GetBalances() []*HyperliquidWalletBalance {
	if x != nil {
		return x.Balances
	}
	return nil
}

func (x *TelegramUser) GetMovements() []*HyperliquidWalletMovement {
	if x != nil {
		return x.Movements
	}
	return nil
}

func (x *TelegramUser) GetLaunchFills() []*HyperliquidLaunchFill {
	if x != nil {
		return x.LaunchFills
	}
	return nil
}

func (x *TelegramUser) GetLabels() []*HyperliquidWalletLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

// TODO
type TelegramUserSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TelegramUserSettings) Reset() {
	*x = TelegramUserSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelegramUserSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelegramUserSettings) ProtoMessage() {}

func (x *TelegramUserSettings) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelegramUserSettings.ProtoReflect.Descriptor instead.
func (*TelegramUserSettings) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{61}
}

// TODO
type TelegramUserReputation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TelegramUserReputation) Reset() {
	*x = TelegramUserReputation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelegramUserReputation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelegramUserReputation) ProtoMessage() {}

func (x *TelegramUserReputation) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelegramUserReputation.ProtoReflect.Descriptor instead.
func (*TelegramUserReputation) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{62}
}

type HyperliquidWalletLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EthereumAddress string `protobuf:"bytes,1,opt,name=ethereum_address,json=ethereumAddress,proto3" json:"ethereum_address,omitempty"`
	Label           string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *HyperliquidWalletLabel) Reset() {
	*x = HyperliquidWalletLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidWalletLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidWalletLabel) ProtoMessage() {}

func (x *HyperliquidWalletLabel) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidWalletLabel.ProtoReflect.Descriptor instead.
func (*HyperliquidWalletLabel) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{63}
}

func (x *HyperliquidWalletLabel) GetEthereumAddress() string {
	if x != nil {
		return x.EthereumAddress
	}
	return ""
}

func (x *HyperliquidWalletLabel) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type HyperliquidWalletPerformanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EthereumAddress *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=ethereum_address,json=ethereumAddress,proto3" json:"ethereum_address,omitempty"`
	AccountType     string                  `protobuf:"bytes,2,opt,name=account_type,json=accountType,proto3" json:"account_type,omitempty"`
}

func (x *HyperliquidWalletPerformanceRequest) Reset() {
	*x = HyperliquidWalletPerformanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidWalletPerformanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidWalletPerformanceRequest) ProtoMessage() {}

func (x *HyperliquidWalletPerformanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidWalletPerformanceRequest.ProtoReflect.Descriptor instead.
func (*HyperliquidWalletPerformanceRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{64}
}

func (x *HyperliquidWalletPerformanceRequest) GetEthereumAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.EthereumAddress
	}
	return nil
}

func (x *HyperliquidWalletPerformanceRequest) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

type PerformancePoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time     int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Notional float32 `protobuf:"fixed32,2,opt,name=notional,proto3" json:"notional,omitempty"`
	Pnl      float32 `protobuf:"fixed32,3,opt,name=pnl,proto3" json:"pnl,omitempty"`
}

func (x *PerformancePoint) Reset() {
	*x = PerformancePoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformancePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformancePoint) ProtoMessage() {}

func (x *PerformancePoint) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformancePoint.ProtoReflect.Descriptor instead.
func (*PerformancePoint) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{65}
}

func (x *PerformancePoint) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *PerformancePoint) GetNotional() float32 {
	if x != nil {
		return x.Notional
	}
	return 0
}

func (x *PerformancePoint) GetPnl() float32 {
	if x != nil {
		return x.Pnl
	}
	return 0
}

type PerformanceReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId     int64   `protobuf:"varint,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	TotalPnl    float32 `protobuf:"fixed32,2,opt,name=total_pnl,json=totalPnl,proto3" json:"total_pnl,omitempty"`
	RunningPnl  float32 `protobuf:"fixed32,3,opt,name=running_pnl,json=runningPnl,proto3" json:"running_pnl,omitempty"`
	Size        float32 `protobuf:"fixed32,4,opt,name=size,proto3" json:"size,omitempty"`
	Price       float32 `protobuf:"fixed32,5,opt,name=price,proto3" json:"price,omitempty"`
	EntryPrice  float32 `protobuf:"fixed32,6,opt,name=entry_price,json=entryPrice,proto3" json:"entry_price,omitempty"`
	TotalCost   float32 `protobuf:"fixed32,7,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	RunningCost float32 `protobuf:"fixed32,8,opt,name=running_cost,json=runningCost,proto3" json:"running_cost,omitempty"`
}

func (x *PerformanceReport) Reset() {
	*x = PerformanceReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceReport) ProtoMessage() {}

func (x *PerformanceReport) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceReport.ProtoReflect.Descriptor instead.
func (*PerformanceReport) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{66}
}

func (x *PerformanceReport) GetTokenId() int64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *PerformanceReport) GetTotalPnl() float32 {
	if x != nil {
		return x.TotalPnl
	}
	return 0
}

func (x *PerformanceReport) GetRunningPnl() float32 {
	if x != nil {
		return x.RunningPnl
	}
	return 0
}

func (x *PerformanceReport) GetSize() float32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PerformanceReport) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PerformanceReport) GetEntryPrice() float32 {
	if x != nil {
		return x.EntryPrice
	}
	return 0
}

func (x *PerformanceReport) GetTotalCost() float32 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *PerformanceReport) GetRunningCost() float32 {
	if x != nil {
		return x.RunningCost
	}
	return 0
}

type Performance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetCash  float32              `protobuf:"fixed32,1,opt,name=net_cash,json=netCash,proto3" json:"net_cash,omitempty"`
	Notional float32              `protobuf:"fixed32,2,opt,name=notional,proto3" json:"notional,omitempty"`
	Reports  []*PerformanceReport `protobuf:"bytes,3,rep,name=reports,proto3" json:"reports,omitempty"`
	Points   []*PerformancePoint  `protobuf:"bytes,4,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *Performance) Reset() {
	*x = Performance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Performance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Performance) ProtoMessage() {}

func (x *Performance) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Performance.ProtoReflect.Descriptor instead.
func (*Performance) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{67}
}

func (x *Performance) GetNetCash() float32 {
	if x != nil {
		return x.NetCash
	}
	return 0
}

func (x *Performance) GetNotional() float32 {
	if x != nil {
		return x.Notional
	}
	return 0
}

func (x *Performance) GetReports() []*PerformanceReport {
	if x != nil {
		return x.Reports
	}
	return nil
}

func (x *Performance) GetPoints() []*PerformancePoint {
	if x != nil {
		return x.Points
	}
	return nil
}

type HyperliquidWalletPerformanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spot   *Performance `protobuf:"bytes,1,opt,name=spot,proto3" json:"spot,omitempty"`
	Perp   *Performance `protobuf:"bytes,2,opt,name=perp,proto3" json:"perp,omitempty"`
	Launch *Performance `protobuf:"bytes,3,opt,name=launch,proto3" json:"launch,omitempty"`
}

func (x *HyperliquidWalletPerformanceResponse) Reset() {
	*x = HyperliquidWalletPerformanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidWalletPerformanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidWalletPerformanceResponse) ProtoMessage() {}

func (x *HyperliquidWalletPerformanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidWalletPerformanceResponse.ProtoReflect.Descriptor instead.
func (*HyperliquidWalletPerformanceResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{68}
}

func (x *HyperliquidWalletPerformanceResponse) GetSpot() *Performance {
	if x != nil {
		return x.Spot
	}
	return nil
}

func (x *HyperliquidWalletPerformanceResponse) GetPerp() *Performance {
	if x != nil {
		return x.Perp
	}
	return nil
}

func (x *HyperliquidWalletPerformanceResponse) GetLaunch() *Performance {
	if x != nil {
		return x.Launch
	}
	return nil
}

// CABALS
type HypurrFunCabal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramChatId int64                          `protobuf:"varint,1,opt,name=telegram_chat_id,json=telegramChatId,proto3" json:"telegram_chat_id,omitempty"`
	Name           string                         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PictureFileId  string                         `protobuf:"bytes,3,opt,name=picture_file_id,json=pictureFileId,proto3" json:"picture_file_id,omitempty"`
	Users          []*HypurrFunCabalUser          `protobuf:"bytes,4,rep,name=users,proto3" json:"users,omitempty"`
	TrackedWallets []*HypurrFunCabalTrackedWallet `protobuf:"bytes,5,rep,name=tracked_wallets,json=trackedWallets,proto3" json:"tracked_wallets,omitempty"`
	UserSeasons    []*HypurrFunCabalUserSeason    `protobuf:"bytes,6,rep,name=user_seasons,json=userSeasons,proto3" json:"user_seasons,omitempty"`
	Summary        *HypurrFunCabalSummary         `protobuf:"bytes,7,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *HypurrFunCabal) Reset() {
	*x = HypurrFunCabal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HypurrFunCabal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HypurrFunCabal) ProtoMessage() {}

func (x *HypurrFunCabal) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HypurrFunCabal.ProtoReflect.Descriptor instead.
func (*HypurrFunCabal) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{69}
}

func (x *HypurrFunCabal) GetTelegramChatId() int64 {
	if x != nil {
		return x.TelegramChatId
	}
	return 0
}

func (x *HypurrFunCabal) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HypurrFunCabal) GetPictureFileId() string {
	if x != nil {
		return x.PictureFileId
	}
	return ""
}

func (x *HypurrFunCabal) GetUsers() []*HypurrFunCabalUser {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *HypurrFunCabal) GetTrackedWallets() []*HypurrFunCabalTrackedWallet {
	if x != nil {
		return x.TrackedWallets
	}
	return nil
}

func (x *HypurrFunCabal) GetUserSeasons() []*HypurrFunCabalUserSeason {
	if x != nil {
		return x.UserSeasons
	}
	return nil
}

func (x *HypurrFunCabal) GetSummary() *HypurrFunCabalSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

type HypurrFunCabalSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserCount       int64   `protobuf:"varint,1,opt,name=user_count,json=userCount,proto3" json:"user_count,omitempty"`
	SeasonSpotPnl   float64 `protobuf:"fixed64,2,opt,name=season_spot_pnl,json=seasonSpotPnl,proto3" json:"season_spot_pnl,omitempty"`
	SeasonPerpPnl   float64 `protobuf:"fixed64,3,opt,name=season_perp_pnl,json=seasonPerpPnl,proto3" json:"season_perp_pnl,omitempty"`
	SeasonLaunchPnl float64 `protobuf:"fixed64,4,opt,name=season_launch_pnl,json=seasonLaunchPnl,proto3" json:"season_launch_pnl,omitempty"`
}

func (x *HypurrFunCabalSummary) Reset() {
	*x = HypurrFunCabalSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HypurrFunCabalSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HypurrFunCabalSummary) ProtoMessage() {}

func (x *HypurrFunCabalSummary) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HypurrFunCabalSummary.ProtoReflect.Descriptor instead.
func (*HypurrFunCabalSummary) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{70}
}

func (x *HypurrFunCabalSummary) GetUserCount() int64 {
	if x != nil {
		return x.UserCount
	}
	return 0
}

func (x *HypurrFunCabalSummary) GetSeasonSpotPnl() float64 {
	if x != nil {
		return x.SeasonSpotPnl
	}
	return 0
}

func (x *HypurrFunCabalSummary) GetSeasonPerpPnl() float64 {
	if x != nil {
		return x.SeasonPerpPnl
	}
	return 0
}

func (x *HypurrFunCabalSummary) GetSeasonLaunchPnl() float64 {
	if x != nil {
		return x.SeasonLaunchPnl
	}
	return 0
}

type HypurrFunCabalUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramChatId int64              `protobuf:"varint,1,opt,name=telegram_chat_id,json=telegramChatId,proto3" json:"telegram_chat_id,omitempty"`
	TelegramId     int64              `protobuf:"varint,2,opt,name=telegram_id,json=telegramId,proto3" json:"telegram_id,omitempty"`
	Wallet         *HyperliquidWallet `protobuf:"bytes,3,opt,name=wallet,proto3" json:"wallet,omitempty"`
	WalletId       int64              `protobuf:"varint,4,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Name           string             `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	SpotPnl        float64            `protobuf:"fixed64,6,opt,name=spot_pnl,json=spotPnl,proto3" json:"spot_pnl,omitempty"`
	SpotEquity     float64            `protobuf:"fixed64,7,opt,name=spot_equity,json=spotEquity,proto3" json:"spot_equity,omitempty"`
	LaunchPnl      float64            `protobuf:"fixed64,8,opt,name=launch_pnl,json=launchPnl,proto3" json:"launch_pnl,omitempty"`
	LaunchEquity   float64            `protobuf:"fixed64,9,opt,name=launch_equity,json=launchEquity,proto3" json:"launch_equity,omitempty"`
	PerpPnl        float64            `protobuf:"fixed64,10,opt,name=perp_pnl,json=perpPnl,proto3" json:"perp_pnl,omitempty"`
	PerpEquity     float64            `protobuf:"fixed64,11,opt,name=perp_equity,json=perpEquity,proto3" json:"perp_equity,omitempty"`
}

func (x *HypurrFunCabalUser) Reset() {
	*x = HypurrFunCabalUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HypurrFunCabalUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HypurrFunCabalUser) ProtoMessage() {}

func (x *HypurrFunCabalUser) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HypurrFunCabalUser.ProtoReflect.Descriptor instead.
func (*HypurrFunCabalUser) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{71}
}

func (x *HypurrFunCabalUser) GetTelegramChatId() int64 {
	if x != nil {
		return x.TelegramChatId
	}
	return 0
}

func (x *HypurrFunCabalUser) GetTelegramId() int64 {
	if x != nil {
		return x.TelegramId
	}
	return 0
}

func (x *HypurrFunCabalUser) GetWallet() *HyperliquidWallet {
	if x != nil {
		return x.Wallet
	}
	return nil
}

func (x *HypurrFunCabalUser) GetWalletId() int64 {
	if x != nil {
		return x.WalletId
	}
	return 0
}

func (x *HypurrFunCabalUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HypurrFunCabalUser) GetSpotPnl() float64 {
	if x != nil {
		return x.SpotPnl
	}
	return 0
}

func (x *HypurrFunCabalUser) GetSpotEquity() float64 {
	if x != nil {
		return x.SpotEquity
	}
	return 0
}

func (x *HypurrFunCabalUser) GetLaunchPnl() float64 {
	if x != nil {
		return x.LaunchPnl
	}
	return 0
}

func (x *HypurrFunCabalUser) GetLaunchEquity() float64 {
	if x != nil {
		return x.LaunchEquity
	}
	return 0
}

func (x *HypurrFunCabalUser) GetPerpPnl() float64 {
	if x != nil {
		return x.PerpPnl
	}
	return 0
}

func (x *HypurrFunCabalUser) GetPerpEquity() float64 {
	if x != nil {
		return x.PerpEquity
	}
	return 0
}

type HypurrFunCabalTrackedWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelegramChatId int64              `protobuf:"varint,1,opt,name=telegram_chat_id,json=telegramChatId,proto3" json:"telegram_chat_id,omitempty"`
	WalletId       int64              `protobuf:"varint,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Wallet         *HyperliquidWallet `protobuf:"bytes,3,opt,name=wallet,proto3" json:"wallet,omitempty"`
	Label          string             `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	AlertSpot      bool               `protobuf:"varint,5,opt,name=alert_spot,json=alertSpot,proto3" json:"alert_spot,omitempty"`
	AlertPerp      bool               `protobuf:"varint,6,opt,name=alert_perp,json=alertPerp,proto3" json:"alert_perp,omitempty"`
}

func (x *HypurrFunCabalTrackedWallet) Reset() {
	*x = HypurrFunCabalTrackedWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HypurrFunCabalTrackedWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HypurrFunCabalTrackedWallet) ProtoMessage() {}

func (x *HypurrFunCabalTrackedWallet) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HypurrFunCabalTrackedWallet.ProtoReflect.Descriptor instead.
func (*HypurrFunCabalTrackedWallet) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{72}
}

func (x *HypurrFunCabalTrackedWallet) GetTelegramChatId() int64 {
	if x != nil {
		return x.TelegramChatId
	}
	return 0
}

func (x *HypurrFunCabalTrackedWallet) GetWalletId() int64 {
	if x != nil {
		return x.WalletId
	}
	return 0
}

func (x *HypurrFunCabalTrackedWallet) GetWallet() *HyperliquidWallet {
	if x != nil {
		return x.Wallet
	}
	return nil
}

func (x *HypurrFunCabalTrackedWallet) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *HypurrFunCabalTrackedWallet) GetAlertSpot() bool {
	if x != nil {
		return x.AlertSpot
	}
	return false
}

func (x *HypurrFunCabalTrackedWallet) GetAlertPerp() bool {
	if x != nil {
		return x.AlertPerp
	}
	return false
}

type HypurrFunCabalSeason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StartTime   int64                       `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime     int64                       `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Name        string                      `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	UserSeasons []*HypurrFunCabalUserSeason `protobuf:"bytes,5,rep,name=user_seasons,json=userSeasons,proto3" json:"user_seasons,omitempty"`
	WinnerId    *wrapperspb.Int64Value      `protobuf:"bytes,6,opt,name=winner_id,json=winnerId,proto3" json:"winner_id,omitempty"`
	Winner      *HypurrFunCabal             `protobuf:"bytes,7,opt,name=winner,proto3" json:"winner,omitempty"`
}

func (x *HypurrFunCabalSeason) Reset() {
	*x = HypurrFunCabalSeason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HypurrFunCabalSeason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HypurrFunCabalSeason) ProtoMessage() {}

func (x *HypurrFunCabalSeason) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HypurrFunCabalSeason.ProtoReflect.Descriptor instead.
func (*HypurrFunCabalSeason) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{73}
}

func (x *HypurrFunCabalSeason) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HypurrFunCabalSeason) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *HypurrFunCabalSeason) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *HypurrFunCabalSeason) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HypurrFunCabalSeason) GetUserSeasons() []*HypurrFunCabalUserSeason {
	if x != nil {
		return x.UserSeasons
	}
	return nil
}

func (x *HypurrFunCabalSeason) GetWinnerId() *wrapperspb.Int64Value {
	if x != nil {
		return x.WinnerId
	}
	return nil
}

func (x *HypurrFunCabalSeason) GetWinner() *HypurrFunCabal {
	if x != nil {
		return x.Winner
	}
	return nil
}

type HypurrFunCabalUserSeason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CabalSeasonId  int64   `protobuf:"varint,1,opt,name=cabal_season_id,json=cabalSeasonId,proto3" json:"cabal_season_id,omitempty"`
	TelegramId     int64   `protobuf:"varint,2,opt,name=telegram_id,json=telegramId,proto3" json:"telegram_id,omitempty"`
	WalletId       int64   `protobuf:"varint,3,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	TelegramChatId int64   `protobuf:"varint,4,opt,name=telegram_chat_id,json=telegramChatId,proto3" json:"telegram_chat_id,omitempty"`
	SpotPnl        float64 `protobuf:"fixed64,5,opt,name=spot_pnl,json=spotPnl,proto3" json:"spot_pnl,omitempty"`
	LaunchPnl      float64 `protobuf:"fixed64,6,opt,name=launch_pnl,json=launchPnl,proto3" json:"launch_pnl,omitempty"`
	PerpPnl        float64 `protobuf:"fixed64,7,opt,name=perp_pnl,json=perpPnl,proto3" json:"perp_pnl,omitempty"`
	LastSpotPnl    float64 `protobuf:"fixed64,8,opt,name=last_spot_pnl,json=lastSpotPnl,proto3" json:"last_spot_pnl,omitempty"`
	LastLaunchPnl  float64 `protobuf:"fixed64,9,opt,name=last_launch_pnl,json=lastLaunchPnl,proto3" json:"last_launch_pnl,omitempty"`
	LastPerpPnl    float64 `protobuf:"fixed64,10,opt,name=last_perp_pnl,json=lastPerpPnl,proto3" json:"last_perp_pnl,omitempty"`
}

func (x *HypurrFunCabalUserSeason) Reset() {
	*x = HypurrFunCabalUserSeason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HypurrFunCabalUserSeason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HypurrFunCabalUserSeason) ProtoMessage() {}

func (x *HypurrFunCabalUserSeason) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HypurrFunCabalUserSeason.ProtoReflect.Descriptor instead.
func (*HypurrFunCabalUserSeason) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{74}
}

func (x *HypurrFunCabalUserSeason) GetCabalSeasonId() int64 {
	if x != nil {
		return x.CabalSeasonId
	}
	return 0
}

func (x *HypurrFunCabalUserSeason) GetTelegramId() int64 {
	if x != nil {
		return x.TelegramId
	}
	return 0
}

func (x *HypurrFunCabalUserSeason) GetWalletId() int64 {
	if x != nil {
		return x.WalletId
	}
	return 0
}

func (x *HypurrFunCabalUserSeason) GetTelegramChatId() int64 {
	if x != nil {
		return x.TelegramChatId
	}
	return 0
}

func (x *HypurrFunCabalUserSeason) GetSpotPnl() float64 {
	if x != nil {
		return x.SpotPnl
	}
	return 0
}

func (x *HypurrFunCabalUserSeason) GetLaunchPnl() float64 {
	if x != nil {
		return x.LaunchPnl
	}
	return 0
}

func (x *HypurrFunCabalUserSeason) GetPerpPnl() float64 {
	if x != nil {
		return x.PerpPnl
	}
	return 0
}

func (x *HypurrFunCabalUserSeason) GetLastSpotPnl() float64 {
	if x != nil {
		return x.LastSpotPnl
	}
	return 0
}

func (x *HypurrFunCabalUserSeason) GetLastLaunchPnl() float64 {
	if x != nil {
		return x.LastLaunchPnl
	}
	return 0
}

func (x *HypurrFunCabalUserSeason) GetLastPerpPnl() float64 {
	if x != nil {
		return x.LastPerpPnl
	}
	return 0
}

type HypurrFunCabalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HypurrFunCabalsRequest) Reset() {
	*x = HypurrFunCabalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HypurrFunCabalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HypurrFunCabalsRequest) ProtoMessage() {}

func (x *HypurrFunCabalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HypurrFunCabalsRequest.ProtoReflect.Descriptor instead.
func (*HypurrFunCabalsRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{75}
}

type HypurrFunCabalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cabals []*HypurrFunCabal `protobuf:"bytes,1,rep,name=cabals,proto3" json:"cabals,omitempty"`
}

func (x *HypurrFunCabalsResponse) Reset() {
	*x = HypurrFunCabalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HypurrFunCabalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HypurrFunCabalsResponse) ProtoMessage() {}

func (x *HypurrFunCabalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HypurrFunCabalsResponse.ProtoReflect.Descriptor instead.
func (*HypurrFunCabalsResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{76}
}

func (x *HypurrFunCabalsResponse) GetCabals() []*HypurrFunCabal {
	if x != nil {
		return x.Cabals
	}
	return nil
}

// Auth endpoints
type TelegramUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthData map[string]string `protobuf:"bytes,1,rep,name=auth_data,json=authData,proto3" json:"auth_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TelegramUserRequest) Reset() {
	*x = TelegramUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelegramUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelegramUserRequest) ProtoMessage() {}

func (x *TelegramUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelegramUserRequest.ProtoReflect.Descriptor instead.
func (*TelegramUserRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{77}
}

func (x *TelegramUserRequest) GetAuthData() map[string]string {
	if x != nil {
		return x.AuthData
	}
	return nil
}

type TelegramUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *TelegramUser `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *TelegramUserResponse) Reset() {
	*x = TelegramUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelegramUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelegramUserResponse) ProtoMessage() {}

func (x *TelegramUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelegramUserResponse.ProtoReflect.Descriptor instead.
func (*TelegramUserResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{78}
}

func (x *TelegramUserResponse) GetUser() *TelegramUser {
	if x != nil {
		return x.User
	}
	return nil
}

type TelegramUserWalletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthData map[string]string `protobuf:"bytes,1,rep,name=auth_data,json=authData,proto3" json:"auth_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TelegramUserWalletsRequest) Reset() {
	*x = TelegramUserWalletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelegramUserWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelegramUserWalletsRequest) ProtoMessage() {}

func (x *TelegramUserWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelegramUserWalletsRequest.ProtoReflect.Descriptor instead.
func (*TelegramUserWalletsRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{79}
}

func (x *TelegramUserWalletsRequest) GetAuthData() map[string]string {
	if x != nil {
		return x.AuthData
	}
	return nil
}

type TelegramUserWalletsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wallets []*HyperliquidWallet `protobuf:"bytes,1,rep,name=wallets,proto3" json:"wallets,omitempty"`
}

func (x *TelegramUserWalletsResponse) Reset() {
	*x = TelegramUserWalletsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelegramUserWalletsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelegramUserWalletsResponse) ProtoMessage() {}

func (x *TelegramUserWalletsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelegramUserWalletsResponse.ProtoReflect.Descriptor instead.
func (*TelegramUserWalletsResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{80}
}

func (x *TelegramUserWalletsResponse) GetWallets() []*HyperliquidWallet {
	if x != nil {
		return x.Wallets
	}
	return nil
}

type HyperliquidLaunchTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthData  map[string]string               `protobuf:"bytes,1,rep,name=auth_data,json=authData,proto3" json:"auth_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LaunchId  int64                           `protobuf:"varint,2,opt,name=launch_id,json=launchId,proto3" json:"launch_id,omitempty"`
	WalletId  int64                           `protobuf:"varint,3,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Direction HyperliquidLaunchTradeDirection `protobuf:"varint,4,opt,name=direction,proto3,enum=hypurr.HyperliquidLaunchTradeDirection" json:"direction,omitempty"`
	Amount    float64                         `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *HyperliquidLaunchTradeRequest) Reset() {
	*x = HyperliquidLaunchTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchTradeRequest) ProtoMessage() {}

func (x *HyperliquidLaunchTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchTradeRequest.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchTradeRequest) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{81}
}

func (x *HyperliquidLaunchTradeRequest) GetAuthData() map[string]string {
	if x != nil {
		return x.AuthData
	}
	return nil
}

func (x *HyperliquidLaunchTradeRequest) GetLaunchId() int64 {
	if x != nil {
		return x.LaunchId
	}
	return 0
}

func (x *HyperliquidLaunchTradeRequest) GetWalletId() int64 {
	if x != nil {
		return x.WalletId
	}
	return 0
}

func (x *HyperliquidLaunchTradeRequest) GetDirection() HyperliquidLaunchTradeDirection {
	if x != nil {
		return x.Direction
	}
	return HyperliquidLaunchTradeDirection_BUY
}

func (x *HyperliquidLaunchTradeRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type HyperliquidLaunchTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAmount  float64 `protobuf:"fixed64,1,opt,name=base_amount,json=baseAmount,proto3" json:"base_amount,omitempty"`
	QuoteAmount float64 `protobuf:"fixed64,2,opt,name=quote_amount,json=quoteAmount,proto3" json:"quote_amount,omitempty"`
	Message     string  `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Success     bool    `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *HyperliquidLaunchTradeResponse) Reset() {
	*x = HyperliquidLaunchTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hypurr_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperliquidLaunchTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperliquidLaunchTradeResponse) ProtoMessage() {}

func (x *HyperliquidLaunchTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hypurr_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperliquidLaunchTradeResponse.ProtoReflect.Descriptor instead.
func (*HyperliquidLaunchTradeResponse) Descriptor() ([]byte, []int) {
	return file_hypurr_proto_rawDescGZIP(), []int{82}
}

func (x *HyperliquidLaunchTradeResponse) GetBaseAmount() float64 {
	if x != nil {
		return x.BaseAmount
	}
	return 0
}

func (x *HyperliquidLaunchTradeResponse) GetQuoteAmount() float64 {
	if x != nil {
		return x.QuoteAmount
	}
	return 0
}

func (x *HyperliquidLaunchTradeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *HyperliquidLaunchTradeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_hypurr_proto protoreflect.FileDescriptor

var file_hypurr_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x03, 0x0a, 0x10, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x7a, 0x5f, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x7a, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x65, 0x69, 0x5f, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77,
	0x65, 0x69, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x12, 0x43, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x79, 0x70, 0x75,
	0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x07, 0x67, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x79, 0x70,
	0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x52, 0x07, 0x67, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6c, 0x71, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x68, 0x6c, 0x71, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x60, 0x0a, 0x16, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3b, 0x0a, 0x1e, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x1f, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x79, 0x70, 0x75,
	0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x07, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x1a, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3b, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xf3, 0x02, 0x0a,
	0x1a, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x74, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x70, 0x6f, 0x74, 0x54, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73,
	0x5f, 0x74, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x54, 0x78, 0x12, 0x2b, 0x0a, 0x11, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54,
	0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x69, 0x70, 0x32, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x68, 0x69, 0x70, 0x32, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x68, 0x69, 0x70, 0x32, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x68, 0x69, 0x70, 0x32,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x69,
	0x70, 0x32, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x68, 0x69, 0x70, 0x32, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x17, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a,
	0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x64, 0x22, 0xef, 0x02, 0x0a, 0x13, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x50, 0x61, 0x69, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x64, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x69, 0x64, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x6e, 0x74, 0x6c, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x4e, 0x74, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x70, 0x78, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x44,
	0x61, 0x79, 0x50, 0x78, 0x22, 0xb6, 0x02, 0x0a, 0x13, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x50, 0x65, 0x72, 0x70, 0x50, 0x61, 0x69, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x64, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x69, 0x64, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x6e, 0x74, 0x6c, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x4e, 0x74, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x70, 0x78, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x44,
	0x61, 0x79, 0x50, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x23,
	0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x22, 0xc8, 0x03,
	0x0a, 0x11, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x74, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x79,
	0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09,
	0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x70, 0x6f,
	0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x0c, 0x73, 0x70, 0x6f, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x49, 0x0a, 0x0f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x79, 0x70, 0x75,
	0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x44, 0x0a, 0x17, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc2,
	0x03, 0x0a, 0x19, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0b,
	0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x79, 0x70,
	0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68,
	0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x64, 0x63, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x75, 0x73, 0x64, 0x63, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0xaa, 0x01, 0x0a, 0x18, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0xac, 0x01, 0x0a, 0x18, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3c, 0x0a,
	0x0b, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22,
	0x9a, 0x07, 0x0a, 0x1e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x77, 0x65, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x57, 0x65, 0x69, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61,
	0x70, 0x12, 0x45, 0x0a, 0x10, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x31, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x31, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0d, 0x61, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x31, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0c, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x31, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x45, 0x0a, 0x10, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x32, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x32, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x3d,
	0x0a, 0x0d, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x32, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x0c, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x32, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x36, 0x0a,
	0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x70, 0x61,
	0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x70, 0x6f,
	0x74, 0x50, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x4d, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x73, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70,
	0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x73, 0x1a, 0x69, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x55, 0x0a, 0x25,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x22, 0xd6, 0x07, 0x0a, 0x11, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6c,
	0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x74, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x0c, 0x74,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x78, 0x30, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x78, 0x30, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x40,
	0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01,
	0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x6b, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x01, 0x6b, 0x12, 0x33, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x6c, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x46, 0x69, 0x6c, 0x6c, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x64,
	0x61, 0x69, 0x6c, 0x79, 0x5f, 0x6e, 0x74, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x4e, 0x74, 0x6c, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x70, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x44, 0x61, 0x79, 0x50, 0x78, 0x12, 0x30, 0x0a,
	0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6c, 0x61, 0x73,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x3e, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x50, 0x6f, 0x6f,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70,
	0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3e, 0x0a,
	0x0a, 0x64, 0x65, 0x76, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x52, 0x09, 0x64, 0x65, 0x76, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x65, 0x76, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x64, 0x65, 0x76, 0x4c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x22, 0xf9, 0x02, 0x0a,
	0x15, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e,
	0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x52, 0x08, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x37, 0x0a, 0x06,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68,
	0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x06, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x64, 0x63, 0x5f, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x73, 0x64, 0x63, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x41, 0x0a, 0x0d, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6d, 0x6f, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x12, 0x54, 0x65, 0x6c,
	0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70,
	0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72,
	0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xe8,
	0x01, 0x0a, 0x18, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x67, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x47, 0x61, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x67,
	0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47,
	0x61, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x47, 0x61, 0x73, 0x22, 0x21, 0x0a, 0x1f, 0x48, 0x79, 0x70,
	0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5e, 0x0a, 0x20,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x07, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1a, 0x0a, 0x18,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x19, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0x85, 0x02, 0x0a, 0x17, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x3c, 0x0a, 0x1f, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x5f, 0x0a,
	0x20, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70,
	0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x2c,
	0x0a, 0x1a, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x6f,
	0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x1b,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x70,
	0x61, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x79, 0x70, 0x75,
	0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x70,
	0x6f, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x22, 0x1d, 0x0a, 0x1b,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x50,
	0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x1c, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x50, 0x61,
	0x69, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x70,
	0x61, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x79, 0x70,
	0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53,
	0x70, 0x6f, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x22, 0x1d,
	0x0a, 0x1b, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x50, 0x65, 0x72,
	0x70, 0x50, 0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x51, 0x0a,
	0x1c, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x50, 0x65, 0x72, 0x70,
	0x50, 0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68,
	0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x50, 0x65, 0x72, 0x70, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73,
	0x22, 0x63, 0x0a, 0x18, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x10,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4e, 0x0a, 0x19, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x06, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22, 0x1c, 0x0a, 0x1a, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x54, 0x0a, 0x1b, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79,
	0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52,
	0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x22, 0x5a, 0x0a, 0x1e, 0x48, 0x79, 0x70,
	0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x6c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x1f, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x79, 0x70,
	0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x22,
	0xa5, 0x02, 0x0a, 0x26, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x74, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x47,
	0x0a, 0x10, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x6d, 0x0a, 0x27, 0x48, 0x79, 0x70, 0x65, 0x72,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79,
	0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x79,
	0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x10, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x22, 0x73, 0x0a, 0x2f, 0x53, 0x65, 0x74, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72,
	0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xaf, 0x01, 0x0a, 0x31, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47,
	0x0a, 0x10, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x76, 0x0a, 0x32, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x40, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x1d, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x22, 0x96, 0x01,
	0x0a, 0x1e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x6c, 0x52, 0x05,
	0x66, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72,
	0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x63, 0x0a, 0x19, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x1f, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x95, 0x01, 0x0a, 0x17, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x43, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x69, 0x67, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x6f,
	0x77, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22,
	0x5d, 0x0a, 0x20, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79,
	0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x43,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x22, 0x2a,
	0x0a, 0x18, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x19, 0x48, 0x79,
	0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72,
	0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x52, 0x06, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x22, 0x88, 0x02, 0x0a, 0x18, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x54, 0x65, 0x6c,
	0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3f, 0x0a, 0x20, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x21, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x61, 0x0a, 0x17, 0x48, 0x79, 0x70,
	0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x48, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3e, 0x0a, 0x1f,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x20,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x39, 0x0a, 0x07, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x48, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x52, 0x07, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x22, 0x25, 0x0a, 0x23, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xbf, 0x08, 0x0a, 0x0c, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x46, 0x65, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x79, 0x70,
	0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x73,
	0x6e, 0x69, 0x70, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x0c, 0x73,
	0x6e, 0x69, 0x70, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x6e, 0x69, 0x70, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x75, 0x6d, 0x70, 0x65, 0x72, 0x5f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68,
	0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x0c, 0x64, 0x75, 0x6d, 0x70, 0x65, 0x72, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x75, 0x6d, 0x70, 0x65, 0x72, 0x5f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x64, 0x75, 0x6d, 0x70, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72,
	0x72, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x73,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x6d, 0x6f, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68,
	0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x09, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x6c, 0x52,
	0x0b, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68,
	0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x18, 0x0a, 0x16,
	0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x75,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x16, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x29, 0x0a, 0x10, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x22, 0x91, 0x01, 0x0a, 0x23, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x10, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x54, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6e, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x70, 0x6e, 0x6c, 0x22, 0xf9, 0x01, 0x0a, 0x11,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6e, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6e, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6e, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6e, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x5f, 0x63,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x43, 0x61,
	0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x33,
	0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x24, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x04, 0x73, 0x70, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68,
	0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x04, 0x73, 0x70, 0x6f, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x65, 0x72, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x70, 0x65, 0x72, 0x70,
	0x12, 0x2b, 0x0a, 0x06, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x22, 0xf4, 0x02,
	0x0a, 0x0e, 0x48, 0x79, 0x70, 0x75, 0x72, 0x72, 0x46, 0x75, 0x6e, 0x43, 0x61, 0x62, 0x61, 0x6c,
	0x12, 0x28, 0x0a, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48,
	0x79, 0x70, 0x75, 0x72, 0x72, 0x46, 0x75, 0x6e, 0x43, 0x61, 0x62, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x75, 0x72,
	0x72, 0x46, 0x75, 0x6e, 0x43, 0x61, 0x62, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68,
	0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x75, 0x72, 0x72, 0x46, 0x75, 0x6e, 0x43,
	0x61, 0x62, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68,
	0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x75, 0x72, 0x72, 0x46, 0x75, 0x6e, 0x43,
	0x61, 0x62, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x22, 0xb2, 0x01, 0x0a, 0x15, 0x48, 0x79, 0x70, 0x75, 0x72, 0x72, 0x46,
	0x75, 0x6e, 0x43, 0x61, 0x62, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x70, 0x6e, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x70,
	0x6f, 0x74, 0x50, 0x6e, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x70, 0x65, 0x72, 0x70, 0x5f, 0x70, 0x6e, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x70, 0x50, 0x6e, 0x6c, 0x12, 0x2a, 0x0a,
	0x11, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x70,
	0x6e, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x50, 0x6e, 0x6c, 0x22, 0xff, 0x02, 0x0a, 0x12, 0x48, 0x79,
	0x70, 0x75, 0x72, 0x72, 0x46, 0x75, 0x6e, 0x43, 0x61, 0x62, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x79,
	0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x70, 0x6e, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x74, 0x50, 0x6e, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70,
	0x6f, 0x74, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x73, 0x70, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x70, 0x6e, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x50, 0x6e, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x70, 0x5f, 0x70, 0x6e, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x70, 0x65, 0x72, 0x70, 0x50, 0x6e, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x65,
	0x72, 0x70, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x70, 0x65, 0x72, 0x70, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x22, 0xeb, 0x01, 0x0a, 0x1b,
	0x48, 0x79, 0x70, 0x75, 0x72, 0x72, 0x46, 0x75, 0x6e, 0x43, 0x61, 0x62, 0x61, 0x6c, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x43,
	0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x06, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x70, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x50, 0x65, 0x72, 0x70, 0x22, 0xa3, 0x02, 0x0a, 0x14, 0x48, 0x79,
	0x70, 0x75, 0x72, 0x72, 0x46, 0x75, 0x6e, 0x43, 0x61, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x43, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e,
	0x48, 0x79, 0x70, 0x75, 0x72, 0x72, 0x46, 0x75, 0x6e, 0x43, 0x61, 0x62, 0x61, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x75, 0x72, 0x72, 0x46,
	0x75, 0x6e, 0x43, 0x61, 0x62, 0x61, 0x6c, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22,
	0xef, 0x02, 0x0a, 0x18, 0x48, 0x79, 0x70, 0x75, 0x72, 0x72, 0x46, 0x75, 0x6e, 0x43, 0x61, 0x62,
	0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f,
	0x63, 0x61, 0x62, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x61, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x70, 0x6f, 0x74, 0x5f, 0x70, 0x6e, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x73, 0x70, 0x6f, 0x74, 0x50, 0x6e, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x5f, 0x70, 0x6e, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x50, 0x6e, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x70, 0x5f, 0x70,
	0x6e, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x65, 0x72, 0x70, 0x50, 0x6e,
	0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x70,
	0x6e, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x70,
	0x6f, 0x74, 0x50, 0x6e, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x5f, 0x70, 0x6e, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x50, 0x6e, 0x6c, 0x12, 0x22, 0x0a,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x70, 0x5f, 0x70, 0x6e, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x65, 0x72, 0x70, 0x50, 0x6e,
	0x6c, 0x22, 0x18, 0x0a, 0x16, 0x48, 0x79, 0x70, 0x75, 0x72, 0x72, 0x46, 0x75, 0x6e, 0x43, 0x61,
	0x62, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x49, 0x0a, 0x17, 0x48,
	0x79, 0x70, 0x75, 0x72, 0x72, 0x46, 0x75, 0x6e, 0x43, 0x61, 0x62, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x63, 0x61, 0x62, 0x61, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e,
	0x48, 0x79, 0x70, 0x75, 0x72, 0x72, 0x46, 0x75, 0x6e, 0x43, 0x61, 0x62, 0x61, 0x6c, 0x52, 0x06,
	0x63, 0x61, 0x62, 0x61, 0x6c, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x13, 0x54, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46,
	0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61, 0x75,
	0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x40, 0x0a, 0x14, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x79, 0x70, 0x75,
	0x72, 0x72, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xa8, 0x01, 0x0a, 0x1a, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72,
	0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x52, 0x0a, 0x1b, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x07, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x22, 0xc7, 0x02, 0x0a, 0x1d, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x79, 0x70, 0x75,
	0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x61, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x45, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0x3b, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x98,
	0x01, 0x0a, 0x1e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2a, 0x52, 0x0a, 0x19, 0x48, 0x79, 0x70,
	0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x50, 0x6f,
	0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x51, 0x75, 0x61, 0x64, 0x72, 0x61,
	0x74, 0x69, 0x63, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x51, 0x75, 0x61, 0x64, 0x72, 0x61, 0x74,
	0x69, 0x63, 0x56, 0x32, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x69, 0x78, 0x65, 0x64, 0x10, 0x03, 0x2a, 0x34, 0x0a,
	0x1f, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x59, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4c,
	0x4c, 0x10, 0x01, 0x32, 0xa4, 0x02, 0x0a, 0x08, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d,
	0x12, 0x4b, 0x0a, 0x0c, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x1b, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a,
	0x13, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x54, 0x65,
	0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72,
	0x72, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x69, 0x0a, 0x16, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x25, 0x2e, 0x68, 0x79, 0x70, 0x75,
	0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xc3, 0x13, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x6f, 0x0a, 0x18, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x68, 0x79, 0x70,
	0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x11, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x20, 0x2e, 0x68, 0x79,
	0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6c, 0x0a, 0x17, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x2e,
	0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x71, 0x0a, 0x18, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x68,
	0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x60, 0x0a, 0x13, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x50, 0x61, 0x69, 0x72, 0x12, 0x22, 0x2e, 0x68, 0x79, 0x70,
	0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53,
	0x70, 0x6f, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x14, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x23, 0x2e,
	0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x50, 0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x50, 0x61, 0x69, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x14, 0x48, 0x79,
	0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x50, 0x65, 0x72, 0x70, 0x50, 0x61, 0x69,
	0x72, 0x73, 0x12, 0x23, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x50, 0x65, 0x72, 0x70, 0x50, 0x61, 0x69, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72,
	0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x50, 0x65, 0x72, 0x70,
	0x50, 0x61, 0x69, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5a, 0x0a, 0x11, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79,
	0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x1f,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2e, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7b, 0x0a, 0x1c, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x2b, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5a, 0x0a, 0x11, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x12, 0x20, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79,
	0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x13, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x65, 0x73, 0x12, 0x22, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a,
	0x17, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x26, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72,
	0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x6b, 0x0a,
	0x16, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x46, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x25, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72,
	0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x46, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x6f, 0x0a, 0x18, 0x48, 0x79,
	0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x43,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x1d, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x27, 0x2e, 0x68,
	0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x74, 0x0a, 0x19, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x28, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x68, 0x79, 0x70,
	0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x77, 0x0a, 0x1c, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x2b, 0x2e, 0x68, 0x79, 0x70, 0x75,
	0x72, 0x72, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x46, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x6f, 0x0a, 0x18, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x27,
	0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72,
	0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0f, 0x48, 0x79, 0x70, 0x75, 0x72, 0x72, 0x46, 0x75, 0x6e,
	0x43, 0x61, 0x62, 0x61, 0x6c, 0x73, 0x12, 0x1e, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e,
	0x48, 0x79, 0x70, 0x75, 0x72, 0x72, 0x46, 0x75, 0x6e, 0x43, 0x61, 0x62, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e,
	0x48, 0x79, 0x70, 0x75, 0x72, 0x72, 0x46, 0x75, 0x6e, 0x43, 0x61, 0x62, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9c, 0x01, 0x0a, 0x27, 0x53, 0x65,
	0x74, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x36, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x53,
	0x65, 0x74, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa5, 0x01, 0x0a, 0x2a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x39, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x23, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68,
	0x79, 0x70, 0x75, 0x72, 0x72, 0x2d, 0x66, 0x75, 0x6e, 0x2f, 0x68, 0x79, 0x70, 0x75, 0x72, 0x72,
	0x2d, 0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hypurr_proto_rawDescOnce sync.Once
	file_hypurr_proto_rawDescData = file_hypurr_proto_rawDesc
)

func file_hypurr_proto_rawDescGZIP() []byte {
	file_hypurr_proto_rawDescOnce.Do(func() {
		file_hypurr_proto_rawDescData = protoimpl.X.CompressGZIP(file_hypurr_proto_rawDescData)
	})
	return file_hypurr_proto_rawDescData
}

var file_hypurr_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_hypurr_proto_msgTypes = make([]protoimpl.MessageInfo, 87)
var file_hypurr_proto_goTypes = []any{
	(HyperliquidLaunchPoolType)(0),                             // 0: hypurr.HyperliquidLaunchPoolType
	(HyperliquidLaunchTradeDirection)(0),                       // 1: hypurr.HyperliquidLaunchTradeDirection
	(*HyperliquidToken)(nil),                                   // 2: hypurr.HyperliquidToken
	(*HyperliquidTokenHolder)(nil),                             // 3: hypurr.HyperliquidTokenHolder
	(*HyperliquidTokenHoldersRequest)(nil),                     // 4: hypurr.HyperliquidTokenHoldersRequest
	(*HyperliquidTokenHoldersResponse)(nil),                    // 5: hypurr.HyperliquidTokenHoldersResponse
	(*HyperliquidTokenStatistics)(nil),                         // 6: hypurr.HyperliquidTokenStatistics
	(*HyperliquidTokenDeployInfo)(nil),                         // 7: hypurr.HyperliquidTokenDeployInfo
	(*HyperliquidTokenGenesis)(nil),                            // 8: hypurr.HyperliquidTokenGenesis
	(*HyperliquidSpotPair)(nil),                                // 9: hypurr.HyperliquidSpotPair
	(*HyperliquidPerpPair)(nil),                                // 10: hypurr.HyperliquidPerpPair
	(*HyperliquidWallet)(nil),                                  // 11: hypurr.HyperliquidWallet
	(*HyperliquidPublicWallet)(nil),                            // 12: hypurr.HyperliquidPublicWallet
	(*HyperliquidWalletMovement)(nil),                          // 13: hypurr.HyperliquidWalletMovement
	(*HyperliquidWalletBalance)(nil),                           // 14: hypurr.HyperliquidWalletBalance
	(*HyperliquidLaunchBalance)(nil),                           // 15: hypurr.HyperliquidLaunchBalance
	(*HyperliquidWalletDeploySession)(nil),                     // 16: hypurr.HyperliquidWalletDeploySession
	(*HyperliquidWalletDeploySessionGenesis)(nil),              // 17: hypurr.HyperliquidWalletDeploySessionGenesis
	(*HyperliquidLaunch)(nil),                                  // 18: hypurr.HyperliquidLaunch
	(*HyperliquidLaunchFill)(nil),                              // 19: hypurr.HyperliquidLaunchFill
	(*TelegramUserPublic)(nil),                                 // 20: hypurr.TelegramUserPublic
	(*HyperliquidDeployAuction)(nil),                           // 21: hypurr.HyperliquidDeployAuction
	(*HyperliquidDeployAuctionRequest)(nil),                    // 22: hypurr.HyperliquidDeployAuctionRequest
	(*HyperliquidDeployAuctionResponse)(nil),                   // 23: hypurr.HyperliquidDeployAuctionResponse
	(*HyperliquidTokensRequest)(nil),                           // 24: hypurr.HyperliquidTokensRequest
	(*HyperliquidTokensResponse)(nil),                          // 25: hypurr.HyperliquidTokensResponse
	(*HyperliquidTokenMessage)(nil),                            // 26: hypurr.HyperliquidTokenMessage
	(*HyperliquidTokenMessagesRequest)(nil),                    // 27: hypurr.HyperliquidTokenMessagesRequest
	(*HyperliquidTokenMessagesResponse)(nil),                   // 28: hypurr.HyperliquidTokenMessagesResponse
	(*HyperliquidSpotPairRequest)(nil),                         // 29: hypurr.HyperliquidSpotPairRequest
	(*HyperliquidSpotPairResponse)(nil),                        // 30: hypurr.HyperliquidSpotPairResponse
	(*HyperliquidSpotPairsRequest)(nil),                        // 31: hypurr.HyperliquidSpotPairsRequest
	(*HyperliquidSpotPairsResponse)(nil),                       // 32: hypurr.HyperliquidSpotPairsResponse
	(*HyperliquidPerpPairsRequest)(nil),                        // 33: hypurr.HyperliquidPerpPairsRequest
	(*HyperliquidPerpPairsResponse)(nil),                       // 34: hypurr.HyperliquidPerpPairsResponse
	(*HyperliquidWalletRequest)(nil),                           // 35: hypurr.HyperliquidWalletRequest
	(*HyperliquidWalletResponse)(nil),                          // 36: hypurr.HyperliquidWalletResponse
	(*HyperliquidLaunchesRequest)(nil),                         // 37: hypurr.HyperliquidLaunchesRequest
	(*HyperliquidLaunchesResponse)(nil),                        // 38: hypurr.HyperliquidLaunchesResponse
	(*HyperliquidLaunchStreamRequest)(nil),                     // 39: hypurr.HyperliquidLaunchStreamRequest
	(*HyperliquidLaunchStreamResponse)(nil),                    // 40: hypurr.HyperliquidLaunchStreamResponse
	(*HyperliquidWalletDeploySessionsRequest)(nil),             // 41: hypurr.HyperliquidWalletDeploySessionsRequest
	(*HyperliquidWalletDeploySessionsResponse)(nil),            // 42: hypurr.HyperliquidWalletDeploySessionsResponse
	(*SetHyperliquidWalletDeploySessionTargetRequest)(nil),     // 43: hypurr.SetHyperliquidWalletDeploySessionTargetRequest
	(*SetHyperliquidWalletDeploySessionTargetResponse)(nil),    // 44: hypurr.SetHyperliquidWalletDeploySessionTargetResponse
	(*DeleteHyperliquidWalletDeploySessionTargetRequest)(nil),  // 45: hypurr.DeleteHyperliquidWalletDeploySessionTargetRequest
	(*DeleteHyperliquidWalletDeploySessionTargetResponse)(nil), // 46: hypurr.DeleteHyperliquidWalletDeploySessionTargetResponse
	(*HyperliquidLaunchFillsRequest)(nil),                      // 47: hypurr.HyperliquidLaunchFillsRequest
	(*HyperliquidLaunchFillsResponse)(nil),                     // 48: hypurr.HyperliquidLaunchFillsResponse
	(*HyperliquidLaunchPosition)(nil),                          // 49: hypurr.HyperliquidLaunchPosition
	(*HyperliquidLaunchCandlesRequest)(nil),                    // 50: hypurr.HyperliquidLaunchCandlesRequest
	(*HyperliquidLaunchCandle)(nil),                            // 51: hypurr.HyperliquidLaunchCandle
	(*HyperliquidLaunchCandlesResponse)(nil),                   // 52: hypurr.HyperliquidLaunchCandlesResponse
	(*HyperliquidLaunchRequest)(nil),                           // 53: hypurr.HyperliquidLaunchRequest
	(*HyperliquidLaunchResponse)(nil),                          // 54: hypurr.HyperliquidLaunchResponse
	(*HyperliquidLaunchMessage)(nil),                           // 55: hypurr.HyperliquidLaunchMessage
	(*HyperliquidLaunchMessagesRequest)(nil),                   // 56: hypurr.HyperliquidLaunchMessagesRequest
	(*HyperliquidLaunchMessagesResponse)(nil),                  // 57: hypurr.HyperliquidLaunchMessagesResponse
	(*HyperliquidLaunchHolder)(nil),                            // 58: hypurr.HyperliquidLaunchHolder
	(*HyperliquidLaunchHoldersRequest)(nil),                    // 59: hypurr.HyperliquidLaunchHoldersRequest
	(*HyperliquidLaunchHoldersResponse)(nil),                   // 60: hypurr.HyperliquidLaunchHoldersResponse
	(*LatestHyperliquidLaunchFillsRequest)(nil),                // 61: hypurr.LatestHyperliquidLaunchFillsRequest
	(*TelegramUser)(nil),                                       // 62: hypurr.TelegramUser
	(*TelegramUserSettings)(nil),                               // 63: hypurr.TelegramUserSettings
	(*TelegramUserReputation)(nil),                             // 64: hypurr.TelegramUserReputation
	(*HyperliquidWalletLabel)(nil),                             // 65: hypurr.HyperliquidWalletLabel
	(*HyperliquidWalletPerformanceRequest)(nil),                // 66: hypurr.HyperliquidWalletPerformanceRequest
	(*PerformancePoint)(nil),                                   // 67: hypurr.PerformancePoint
	(*PerformanceReport)(nil),                                  // 68: hypurr.PerformanceReport
	(*Performance)(nil),                                        // 69: hypurr.Performance
	(*HyperliquidWalletPerformanceResponse)(nil),               // 70: hypurr.HyperliquidWalletPerformanceResponse
	(*HypurrFunCabal)(nil),                                     // 71: hypurr.HypurrFunCabal
	(*HypurrFunCabalSummary)(nil),                              // 72: hypurr.HypurrFunCabalSummary
	(*HypurrFunCabalUser)(nil),                                 // 73: hypurr.HypurrFunCabalUser
	(*HypurrFunCabalTrackedWallet)(nil),                        // 74: hypurr.HypurrFunCabalTrackedWallet
	(*HypurrFunCabalSeason)(nil),                               // 75: hypurr.HypurrFunCabalSeason
	(*HypurrFunCabalUserSeason)(nil),                           // 76: hypurr.HypurrFunCabalUserSeason
	(*HypurrFunCabalsRequest)(nil),                             // 77: hypurr.HypurrFunCabalsRequest
	(*HypurrFunCabalsResponse)(nil),                            // 78: hypurr.HypurrFunCabalsResponse
	(*TelegramUserRequest)(nil),                                // 79: hypurr.TelegramUserRequest
	(*TelegramUserResponse)(nil),                               // 80: hypurr.TelegramUserResponse
	(*TelegramUserWalletsRequest)(nil),                         // 81: hypurr.TelegramUserWalletsRequest
	(*TelegramUserWalletsResponse)(nil),                        // 82: hypurr.TelegramUserWalletsResponse
	(*HyperliquidLaunchTradeRequest)(nil),                      // 83: hypurr.HyperliquidLaunchTradeRequest
	(*HyperliquidLaunchTradeResponse)(nil),                     // 84: hypurr.HyperliquidLaunchTradeResponse
	nil,                                                        // 85: hypurr.HyperliquidWalletDeploySession.GenesesEntry
	nil,                                                        // 86: hypurr.TelegramUserRequest.AuthDataEntry
	nil,                                                        // 87: hypurr.TelegramUserWalletsRequest.AuthDataEntry
	nil,                                                        // 88: hypurr.HyperliquidLaunchTradeRequest.AuthDataEntry
	(*wrapperspb.Int64Value)(nil),                              // 89: google.protobuf.Int64Value
	(*wrapperspb.StringValue)(nil),                             // 90: google.protobuf.StringValue
	(*wrapperspb.DoubleValue)(nil),                             // 91: google.protobuf.DoubleValue
}
var file_hypurr_proto_depIdxs = []int32{
	7,   // 0: hypurr.HyperliquidToken.deploy_info:type_name -> hypurr.HyperliquidTokenDeployInfo
	8,   // 1: hypurr.HyperliquidToken.geneses:type_name -> hypurr.HyperliquidTokenGenesis
	6,   // 2: hypurr.HyperliquidToken.statistics:type_name -> hypurr.HyperliquidTokenStatistics
	3,   // 3: hypurr.HyperliquidTokenHoldersResponse.holders:type_name -> hypurr.HyperliquidTokenHolder
	89,  // 4: hypurr.HyperliquidTokenGenesis.target_token_id:type_name -> google.protobuf.Int64Value
	2,   // 5: hypurr.HyperliquidSpotPair.base:type_name -> hypurr.HyperliquidToken
	2,   // 6: hypurr.HyperliquidSpotPair.quote:type_name -> hypurr.HyperliquidToken
	89,  // 7: hypurr.HyperliquidWallet.telegram_id:type_name -> google.protobuf.Int64Value
	13,  // 8: hypurr.HyperliquidWallet.movements:type_name -> hypurr.HyperliquidWalletMovement
	14,  // 9: hypurr.HyperliquidWallet.spot_balances:type_name -> hypurr.HyperliquidWalletBalance
	15,  // 10: hypurr.HyperliquidWallet.launch_balances:type_name -> hypurr.HyperliquidLaunchBalance
	89,  // 11: hypurr.HyperliquidWalletMovement.telegram_id:type_name -> google.protobuf.Int64Value
	11,  // 12: hypurr.HyperliquidWalletMovement.wallet:type_name -> hypurr.HyperliquidWallet
	2,   // 13: hypurr.HyperliquidWalletMovement.token:type_name -> hypurr.HyperliquidToken
	89,  // 14: hypurr.HyperliquidWalletMovement.timestamp:type_name -> google.protobuf.Int64Value
	89,  // 15: hypurr.HyperliquidWalletBalance.telegram_id:type_name -> google.protobuf.Int64Value
	89,  // 16: hypurr.HyperliquidLaunchBalance.telegram_id:type_name -> google.protobuf.Int64Value
	89,  // 17: hypurr.HyperliquidWalletDeploySession.telegram_id:type_name -> google.protobuf.Int64Value
	89,  // 18: hypurr.HyperliquidWalletDeploySession.anchor1_token_id:type_name -> google.protobuf.Int64Value
	2,   // 19: hypurr.HyperliquidWalletDeploySession.anchor1_token:type_name -> hypurr.HyperliquidToken
	89,  // 20: hypurr.HyperliquidWalletDeploySession.anchor2_token_id:type_name -> google.protobuf.Int64Value
	2,   // 21: hypurr.HyperliquidWalletDeploySession.anchor2_token:type_name -> hypurr.HyperliquidToken
	89,  // 22: hypurr.HyperliquidWalletDeploySession.token_id:type_name -> google.protobuf.Int64Value
	85,  // 23: hypurr.HyperliquidWalletDeploySession.geneses:type_name -> hypurr.HyperliquidWalletDeploySession.GenesesEntry
	20,  // 24: hypurr.HyperliquidLaunch.telegram_user:type_name -> hypurr.TelegramUserPublic
	16,  // 25: hypurr.HyperliquidLaunch.session:type_name -> hypurr.HyperliquidWalletDeploySession
	89,  // 26: hypurr.HyperliquidLaunch.topic_id:type_name -> google.protobuf.Int64Value
	19,  // 27: hypurr.HyperliquidLaunch.fills:type_name -> hypurr.HyperliquidLaunchFill
	0,   // 28: hypurr.HyperliquidLaunch.pool_type:type_name -> hypurr.HyperliquidLaunchPoolType
	12,  // 29: hypurr.HyperliquidLaunch.session_wallet:type_name -> hypurr.HyperliquidPublicWallet
	12,  // 30: hypurr.HyperliquidLaunch.dev_wallet:type_name -> hypurr.HyperliquidPublicWallet
	20,  // 31: hypurr.HyperliquidLaunchFill.telegram:type_name -> hypurr.TelegramUserPublic
	12,  // 32: hypurr.HyperliquidLaunchFill.wallet:type_name -> hypurr.HyperliquidPublicWallet
	90,  // 33: hypurr.HyperliquidLaunchFill.movement_hash:type_name -> google.protobuf.StringValue
	91,  // 34: hypurr.HyperliquidDeployAuction.current_gas:type_name -> google.protobuf.DoubleValue
	91,  // 35: hypurr.HyperliquidDeployAuction.end_gas:type_name -> google.protobuf.DoubleValue
	21,  // 36: hypurr.HyperliquidDeployAuctionResponse.auction:type_name -> hypurr.HyperliquidDeployAuction
	2,   // 37: hypurr.HyperliquidTokensResponse.tokens:type_name -> hypurr.HyperliquidToken
	20,  // 38: hypurr.HyperliquidTokenMessage.author:type_name -> hypurr.TelegramUserPublic
	26,  // 39: hypurr.HyperliquidTokenMessagesResponse.messages:type_name -> hypurr.HyperliquidTokenMessage
	9,   // 40: hypurr.HyperliquidSpotPairResponse.pair:type_name -> hypurr.HyperliquidSpotPair
	9,   // 41: hypurr.HyperliquidSpotPairsResponse.pairs:type_name -> hypurr.HyperliquidSpotPair
	10,  // 42: hypurr.HyperliquidPerpPairsResponse.pairs:type_name -> hypurr.HyperliquidPerpPair
	90,  // 43: hypurr.HyperliquidWalletRequest.ethereum_address:type_name -> google.protobuf.StringValue
	11,  // 44: hypurr.HyperliquidWalletResponse.wallet:type_name -> hypurr.HyperliquidWallet
	18,  // 45: hypurr.HyperliquidLaunchesResponse.launches:type_name -> hypurr.HyperliquidLaunch
	89,  // 46: hypurr.HyperliquidLaunchStreamRequest.launch_id:type_name -> google.protobuf.Int64Value
	18,  // 47: hypurr.HyperliquidLaunchStreamResponse.launches:type_name -> hypurr.HyperliquidLaunch
	89,  // 48: hypurr.HyperliquidWalletDeploySessionsRequest.telegram_id:type_name -> google.protobuf.Int64Value
	89,  // 49: hypurr.HyperliquidWalletDeploySessionsRequest.wallet_id:type_name -> google.protobuf.Int64Value
	89,  // 50: hypurr.HyperliquidWalletDeploySessionsRequest.session_id:type_name -> google.protobuf.Int64Value
	90,  // 51: hypurr.HyperliquidWalletDeploySessionsRequest.ethereum_address:type_name -> google.protobuf.StringValue
	16,  // 52: hypurr.HyperliquidWalletDeploySessionsResponse.sessions:type_name -> hypurr.HyperliquidWalletDeploySession
	90,  // 53: hypurr.SetHyperliquidWalletDeploySessionTargetRequest.ethereum_address:type_name -> google.protobuf.StringValue
	16,  // 54: hypurr.SetHyperliquidWalletDeploySessionTargetResponse.session:type_name -> hypurr.HyperliquidWalletDeploySession
	90,  // 55: hypurr.DeleteHyperliquidWalletDeploySessionTargetRequest.ethereum_address:type_name -> google.protobuf.StringValue
	16,  // 56: hypurr.DeleteHyperliquidWalletDeploySessionTargetResponse.session:type_name -> hypurr.HyperliquidWalletDeploySession
	89,  // 57: hypurr.HyperliquidLaunchFillsRequest.launch_id:type_name -> google.protobuf.Int64Value
	19,  // 58: hypurr.HyperliquidLaunchFillsResponse.fills:type_name -> hypurr.HyperliquidLaunchFill
	49,  // 59: hypurr.HyperliquidLaunchFillsResponse.positions:type_name -> hypurr.HyperliquidLaunchPosition
	51,  // 60: hypurr.HyperliquidLaunchCandlesResponse.candles:type_name -> hypurr.HyperliquidLaunchCandle
	18,  // 61: hypurr.HyperliquidLaunchResponse.launch:type_name -> hypurr.HyperliquidLaunch
	20,  // 62: hypurr.HyperliquidLaunchMessage.author:type_name -> hypurr.TelegramUserPublic
	55,  // 63: hypurr.HyperliquidLaunchMessagesResponse.messages:type_name -> hypurr.HyperliquidLaunchMessage
	58,  // 64: hypurr.HyperliquidLaunchHoldersResponse.holders:type_name -> hypurr.HyperliquidLaunchHolder
	63,  // 65: hypurr.TelegramUser.settings:type_name -> hypurr.TelegramUserSettings
	11,  // 66: hypurr.TelegramUser.wallet:type_name -> hypurr.HyperliquidWallet
	11,  // 67: hypurr.TelegramUser.wallets:type_name -> hypurr.HyperliquidWallet
	11,  // 68: hypurr.TelegramUser.sniper_wallet:type_name -> hypurr.HyperliquidWallet
	11,  // 69: hypurr.TelegramUser.dumper_wallet:type_name -> hypurr.HyperliquidWallet
	64,  // 70: hypurr.TelegramUser.reputation:type_name -> hypurr.TelegramUserReputation
	18,  // 71: hypurr.TelegramUser.launches:type_name -> hypurr.HyperliquidLaunch
	14,  // 72: hypurr.TelegramUser.balances:type_name -> hypurr.HyperliquidWalletBalance
	13,  // 73: hypurr.TelegramUser.movements:type_name -> hypurr.HyperliquidWalletMovement
	19,  // 74: hypurr.TelegramUser.launch_fills:type_name -> hypurr.HyperliquidLaunchFill
	65,  // 75: hypurr.TelegramUser.labels:type_name -> hypurr.HyperliquidWalletLabel
	90,  // 76: hypurr.HyperliquidWalletPerformanceRequest.ethereum_address:type_name -> google.protobuf.StringValue
	68,  // 77: hypurr.Performance.reports:type_name -> hypurr.PerformanceReport
	67,  // 78: hypurr.Performance.points:type_name -> hypurr.PerformancePoint
	69,  // 79: hypurr.HyperliquidWalletPerformanceResponse.spot:type_name -> hypurr.Performance
	69,  // 80: hypurr.HyperliquidWalletPerformanceResponse.perp:type_name -> hypurr.Performance
	69,  // 81: hypurr.HyperliquidWalletPerformanceResponse.launch:type_name -> hypurr.Performance
	73,  // 82: hypurr.HypurrFunCabal.users:type_name -> hypurr.HypurrFunCabalUser
	74,  // 83: hypurr.HypurrFunCabal.tracked_wallets:type_name -> hypurr.HypurrFunCabalTrackedWallet
	76,  // 84: hypurr.HypurrFunCabal.user_seasons:type_name -> hypurr.HypurrFunCabalUserSeason
	72,  // 85: hypurr.HypurrFunCabal.summary:type_name -> hypurr.HypurrFunCabalSummary
	11,  // 86: hypurr.HypurrFunCabalUser.wallet:type_name -> hypurr.HyperliquidWallet
	11,  // 87: hypurr.HypurrFunCabalTrackedWallet.wallet:type_name -> hypurr.HyperliquidWallet
	76,  // 88: hypurr.HypurrFunCabalSeason.user_seasons:type_name -> hypurr.HypurrFunCabalUserSeason
	89,  // 89: hypurr.HypurrFunCabalSeason.winner_id:type_name -> google.protobuf.Int64Value
	71,  // 90: hypurr.HypurrFunCabalSeason.winner:type_name -> hypurr.HypurrFunCabal
	71,  // 91: hypurr.HypurrFunCabalsResponse.cabals:type_name -> hypurr.HypurrFunCabal
	86,  // 92: hypurr.TelegramUserRequest.auth_data:type_name -> hypurr.TelegramUserRequest.AuthDataEntry
	62,  // 93: hypurr.TelegramUserResponse.user:type_name -> hypurr.TelegramUser
	87,  // 94: hypurr.TelegramUserWalletsRequest.auth_data:type_name -> hypurr.TelegramUserWalletsRequest.AuthDataEntry
	11,  // 95: hypurr.TelegramUserWalletsResponse.wallets:type_name -> hypurr.HyperliquidWallet
	88,  // 96: hypurr.HyperliquidLaunchTradeRequest.auth_data:type_name -> hypurr.HyperliquidLaunchTradeRequest.AuthDataEntry
	1,   // 97: hypurr.HyperliquidLaunchTradeRequest.direction:type_name -> hypurr.HyperliquidLaunchTradeDirection
	17,  // 98: hypurr.HyperliquidWalletDeploySession.GenesesEntry.value:type_name -> hypurr.HyperliquidWalletDeploySessionGenesis
	79,  // 99: hypurr.Telegram.TelegramUser:input_type -> hypurr.TelegramUserRequest
	81,  // 100: hypurr.Telegram.TelegramUserWallets:input_type -> hypurr.TelegramUserWalletsRequest
	83,  // 101: hypurr.Telegram.HyperliquidLaunchTrade:input_type -> hypurr.HyperliquidLaunchTradeRequest
	22,  // 102: hypurr.Static.HyperliquidDeployAuction:input_type -> hypurr.HyperliquidDeployAuctionRequest
	24,  // 103: hypurr.Static.HyperliquidTokens:input_type -> hypurr.HyperliquidTokensRequest
	4,   // 104: hypurr.Static.HyperliquidTokenHolders:input_type -> hypurr.HyperliquidTokenHoldersRequest
	27,  // 105: hypurr.Static.HyperliquidTokenMessages:input_type -> hypurr.HyperliquidTokenMessagesRequest
	29,  // 106: hypurr.Static.HyperliquidSpotPair:input_type -> hypurr.HyperliquidSpotPairRequest
	31,  // 107: hypurr.Static.HyperliquidSpotPairs:input_type -> hypurr.HyperliquidSpotPairsRequest
	33,  // 108: hypurr.Static.HyperliquidPerpPairs:input_type -> hypurr.HyperliquidPerpPairsRequest
	35,  // 109: hypurr.Static.HyperliquidWallet:input_type -> hypurr.HyperliquidWalletRequest
	41,  // 110: hypurr.Static.HyperliquidWalletDeploySessions:input_type -> hypurr.HyperliquidWalletDeploySessionsRequest
	66,  // 111: hypurr.Static.HyperliquidWalletPerformance:input_type -> hypurr.HyperliquidWalletPerformanceRequest
	53,  // 112: hypurr.Static.HyperliquidLaunch:input_type -> hypurr.HyperliquidLaunchRequest
	37,  // 113: hypurr.Static.HyperliquidLaunches:input_type -> hypurr.HyperliquidLaunchesRequest
	39,  // 114: hypurr.Static.HyperliquidLaunchStream:input_type -> hypurr.HyperliquidLaunchStreamRequest
	47,  // 115: hypurr.Static.HyperliquidLaunchFills:input_type -> hypurr.HyperliquidLaunchFillsRequest
	50,  // 116: hypurr.Static.HyperliquidLaunchCandles:input_type -> hypurr.HyperliquidLaunchCandlesRequest
	50,  // 117: hypurr.Static.HyperliquidLaunchCandleStream:input_type -> hypurr.HyperliquidLaunchCandlesRequest
	56,  // 118: hypurr.Static.HyperliquidLaunchMessages:input_type -> hypurr.HyperliquidLaunchMessagesRequest
	61,  // 119: hypurr.Static.LatestHyperliquidLaunchFills:input_type -> hypurr.LatestHyperliquidLaunchFillsRequest
	59,  // 120: hypurr.Static.HyperliquidLaunchHolders:input_type -> hypurr.HyperliquidLaunchHoldersRequest
	77,  // 121: hypurr.Static.HypurrFunCabals:input_type -> hypurr.HypurrFunCabalsRequest
	43,  // 122: hypurr.Static.SetHyperliquidWalletDeploySessionTarget:input_type -> hypurr.SetHyperliquidWalletDeploySessionTargetRequest
	45,  // 123: hypurr.Static.DeleteHyperliquidWalletDeploySessionTarget:input_type -> hypurr.DeleteHyperliquidWalletDeploySessionTargetRequest
	80,  // 124: hypurr.Telegram.TelegramUser:output_type -> hypurr.TelegramUserResponse
	82,  // 125: hypurr.Telegram.TelegramUserWallets:output_type -> hypurr.TelegramUserWalletsResponse
	84,  // 126: hypurr.Telegram.HyperliquidLaunchTrade:output_type -> hypurr.HyperliquidLaunchTradeResponse
	23,  // 127: hypurr.Static.HyperliquidDeployAuction:output_type -> hypurr.HyperliquidDeployAuctionResponse
	25,  // 128: hypurr.Static.HyperliquidTokens:output_type -> hypurr.HyperliquidTokensResponse
	5,   // 129: hypurr.Static.HyperliquidTokenHolders:output_type -> hypurr.HyperliquidTokenHoldersResponse
	28,  // 130: hypurr.Static.HyperliquidTokenMessages:output_type -> hypurr.HyperliquidTokenMessagesResponse
	30,  // 131: hypurr.Static.HyperliquidSpotPair:output_type -> hypurr.HyperliquidSpotPairResponse
	32,  // 132: hypurr.Static.HyperliquidSpotPairs:output_type -> hypurr.HyperliquidSpotPairsResponse
	34,  // 133: hypurr.Static.HyperliquidPerpPairs:output_type -> hypurr.HyperliquidPerpPairsResponse
	36,  // 134: hypurr.Static.HyperliquidWallet:output_type -> hypurr.HyperliquidWalletResponse
	42,  // 135: hypurr.Static.HyperliquidWalletDeploySessions:output_type -> hypurr.HyperliquidWalletDeploySessionsResponse
	70,  // 136: hypurr.Static.HyperliquidWalletPerformance:output_type -> hypurr.HyperliquidWalletPerformanceResponse
	54,  // 137: hypurr.Static.HyperliquidLaunch:output_type -> hypurr.HyperliquidLaunchResponse
	38,  // 138: hypurr.Static.HyperliquidLaunches:output_type -> hypurr.HyperliquidLaunchesResponse
	40,  // 139: hypurr.Static.HyperliquidLaunchStream:output_type -> hypurr.HyperliquidLaunchStreamResponse
	48,  // 140: hypurr.Static.HyperliquidLaunchFills:output_type -> hypurr.HyperliquidLaunchFillsResponse
	52,  // 141: hypurr.Static.HyperliquidLaunchCandles:output_type -> hypurr.HyperliquidLaunchCandlesResponse
	52,  // 142: hypurr.Static.HyperliquidLaunchCandleStream:output_type -> hypurr.HyperliquidLaunchCandlesResponse
	57,  // 143: hypurr.Static.HyperliquidLaunchMessages:output_type -> hypurr.HyperliquidLaunchMessagesResponse
	48,  // 144: hypurr.Static.LatestHyperliquidLaunchFills:output_type -> hypurr.HyperliquidLaunchFillsResponse
	60,  // 145: hypurr.Static.HyperliquidLaunchHolders:output_type -> hypurr.HyperliquidLaunchHoldersResponse
	78,  // 146: hypurr.Static.HypurrFunCabals:output_type -> hypurr.HypurrFunCabalsResponse
	44,  // 147: hypurr.Static.SetHyperliquidWalletDeploySessionTarget:output_type -> hypurr.SetHyperliquidWalletDeploySessionTargetResponse
	46,  // 148: hypurr.Static.DeleteHyperliquidWalletDeploySessionTarget:output_type -> hypurr.DeleteHyperliquidWalletDeploySessionTargetResponse
	124, // [124:149] is the sub-list for method output_type
	99,  // [99:124] is the sub-list for method input_type
	99,  // [99:99] is the sub-list for extension type_name
	99,  // [99:99] is the sub-list for extension extendee
	0,   // [0:99] is the sub-list for field type_name
}

func init() { file_hypurr_proto_init() }
func file_hypurr_proto_init() {
	if File_hypurr_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hypurr_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidTokenHolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidTokenHoldersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidTokenHoldersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidTokenStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidTokenDeployInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidTokenGenesis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidSpotPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidPerpPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidPublicWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidWalletMovement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidWalletBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidWalletDeploySession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidWalletDeploySessionGenesis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchFill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*TelegramUserPublic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidDeployAuction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidDeployAuctionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidDeployAuctionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidTokensRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidTokensResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidTokenMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidTokenMessagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidTokenMessagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidSpotPairRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidSpotPairResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidSpotPairsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidSpotPairsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidPerpPairsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidPerpPairsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidWalletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidWalletDeploySessionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidWalletDeploySessionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*SetHyperliquidWalletDeploySessionTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*SetHyperliquidWalletDeploySessionTargetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteHyperliquidWalletDeploySessionTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteHyperliquidWalletDeploySessionTargetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchFillsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchFillsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchCandlesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchCandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchCandlesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchMessagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchMessagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchHolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchHoldersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchHoldersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*LatestHyperliquidLaunchFillsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*TelegramUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*TelegramUserSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*TelegramUserReputation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidWalletLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidWalletPerformanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*PerformancePoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*PerformanceReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*Performance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidWalletPerformanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*HypurrFunCabal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*HypurrFunCabalSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*HypurrFunCabalUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*HypurrFunCabalTrackedWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*HypurrFunCabalSeason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*HypurrFunCabalUserSeason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*HypurrFunCabalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*HypurrFunCabalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*TelegramUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*TelegramUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*TelegramUserWalletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*TelegramUserWalletsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hypurr_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*HyperliquidLaunchTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hypurr_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   87,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_hypurr_proto_goTypes,
		DependencyIndexes: file_hypurr_proto_depIdxs,
		EnumInfos:         file_hypurr_proto_enumTypes,
		MessageInfos:      file_hypurr_proto_msgTypes,
	}.Build()
	File_hypurr_proto = out.File
	file_hypurr_proto_rawDesc = nil
	file_hypurr_proto_goTypes = nil
	file_hypurr_proto_depIdxs = nil
}
